<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BT_CSB_Tools</name>
    </assembly>
    <members>
        <member name="T:BT_CSB_Tools.CSharpTestbench">
            <summary>
            The test bench.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.CheckSignalsAtomic(System.Collections.Generic.List{BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic},System.Int32,System.Boolean)">
            <summary>
            <para>_</para>
            <para>This methods takes a list of atomic signals, proofs that all signals are available for the rtsim,</para>
            <para>removes unavailabe/not configured signals out of the given list and returns a new filtered list.</para>
            <para>_</para>
            <para>Optional: 'subscribe = true' subscribes the valid signal to the reading thread of the c# testbench.</para>
            </summary>
            <param name="atomicSignals"></param>
            <param name="subscribe"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.CheckSignalInRange(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal,System.Object,System.Object,System.Double,System.Double,System.Int32)">
            <summary>
            Checks whether the specified signal is and stays in the given range
            for the specified amount of time in the staticTimeout and at every
            tick of the passed interval.
            </summary>
            <param name="signal">The signal whose value is to be checked.</param>
            <param name="min">The minimum value for the range that is to be checked.</param>
            <param name="max">The maximum value for the range that is to be checked.</param>
            <param name="timeout">The timeout. When do you want to stop verifying?</param>
            <param name="staticTimeout">The timeout of the static edition check.</param>
            <param name="interval">The interval: how often do you want to check per minute?</param>
            <typeparam name="T"></typeparam>
            <returns>TRUE if the signal is in range and did not change, otherwise false.</returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.CheckCondition(System.Double,System.Double,System.Int32,BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic[])">
            <summary>
            Checks whether the specified signals are and stay with the sepcified condition
            for the specified amount of time in the staticTimeout and at every
            tick of the passed interval.
            </summary>
            <param name="timeout"></param>
            <param name="staticTimeout"></param>
            <param name="interval"></param>
            <param name="atomicSignals"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.CheckStatic(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal,System.Object,System.Double,System.Int32)">
            <summary>
            <para>_</para>
            <para>This method checks the value of a signal for a given timeout(ms) if it stays static.</para>
            <para>_</para>
            <para>Returns 'True' after the timeout if the value stays static at the given value.</para>
            <para>Returns 'False' immediately, if the signal value is unequal to the given value.</para>
            <para>_</para>
            <para>Optional: 'interval = x' specifies the reading interval every x = milisecond</para>
            </summary>
            <param name="signal"></param>
            <param name="value"></param>
            <param name="timeout"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.CheckStaticCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal,BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,System.Object,System.Double,System.Int32)">
            <summary>
            <para>_</para>
            <para>This method checks the value of a signal for a given timeout(ms) to hold the specified 'Is' condition.</para>
            <para>_</para>
            <para>Returns 'True' after the timeout if the value stays static at the given value and condition.</para>
            <para>Returns 'False' immediately, if the signal value is unequal to the given value and condition.</para>
            <para>_</para>
            <para>Optional: 'interval = x' specifies the reading interval every x = milisecond</para>
            </summary>
            <param name="signal"></param>
            <param name="condition"></param>
            <param name="value"></param>
            <param name="timeout"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.CheckStaticConditionAtomic(System.Collections.Generic.List{BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic},System.Double,System.Int32)">
            <summary>
            <para>_</para>
            <para>This method checks a list of atomic signals for a given timeout(ms).</para>
            <para>_</para>
            <para>Each 'Atomic' object of the list defines a specified 'Is' condition/operator.</para>
            <para>Also each 'Atomic' object defines the value to be checked.</para>
            <para>_</para>
            <para>Returns 'True' after the timeout, if all signal values stay static at the given value and condition.</para>
            <para>Returns 'False' immediately, if one of the signal values is unequal to the given value and condition.</para>
            <para>_</para>
            <para>Optional: 'interval = x' specifies the reading interval every x = milisecond</para>
            </summary>
            <param name="signals"></param>
            <param name="timeout"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.CheckStaticConditionAtomic(System.Double,System.Int32,BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic[])">
            <summary>
            <para>_</para>
            <para>This method checks a list of atomic signals for a given timeout(ms).</para>
            <para>_</para>
            <para>Each 'Atomic' object of the list defines a specified 'Is' condition/operator.</para>
            <para>Also each 'Atomic' object defines the value to be checked.</para>
            <para>_</para>
            <para>Returns 'True' after the timeout, if all signal values stay static at the given value and condition.</para>
            <para>Returns 'False' immediately, if one of the signal values is unequal to the given value and condition.</para>
            <para>_</para>
            <para>Optional: 'interval = x' specifies the reading interval every x = milisecond</para>
            </summary>
            <param name="timeout"></param>
            <param name="interval"></param>
            <param name="signals"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.CheckStaticExpressionAtomic(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.AtomicExpression,System.Double,System.Int32)">
            <summary>
            <para>_</para>
            <para>This method checks as long as the given timeout if the values of the atomic signal list stay at the specified expression.</para>
            <para>_</para>
            <para>An 'AtomicExpression' can be specified like the following example:</para>
            <para>_</para>
            <para>Client1.Signal1.Atomic >= 5 | Brackets(Client2.Signal2.Atomic == 8 &amp; !(Client2.Signal3.Atomic == 1))</para>
            <para>_</para>
            <para>The AND expression is represented by a single "&amp;"</para>
            <para>The OR  expression is represented by a single "|"</para>
            <para>The NEGATION expr. is represented by a single "!" before a paranthesis ()</para>
            <para>Use the keyword Brackts(...) to group signals into one boolean expression.</para>
            <para>_</para>
            <para>Returns 'True' if all signal values stayed at the specified expression within the timeout.</para>
            <para>Returns 'False' immediately if one of the signal values do not met the specified expression.</para>
            <para>_</para>
            <para>Optional: 'interval = x' specifies the reading interval every x = milisecond</para>
            </summary>
            <param name="expression"></param>
            <param name="timeout"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.ForceAtomic(System.Collections.Generic.List{BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic})">
            <summary>
            <para>_</para>
            <para>This method forces a list of atomic signals to the specified values.</para>
            <para>Each 'Atomic' object of the list defines a specified value to be forced.</para>
            </summary>
            <param name="signals"></param>
            <returns></returns>        
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.ForceAtomic(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic[])">
            <summary>
            <para>_</para>
            <para>This method forces a list of atomic signals to the specified values.</para>
            <para>Each 'Atomic' object of the list defines a specified value to be forced.</para>
            </summary>
            <param name="signals"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.InitializeSignalHandles(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal[])">
            <summary>
            If this testcase connects to a VirtualTrain or SoftTCSM environment
            every signal which get's used later on in the testcase needs to be
            initialized within this method first to work flawless.
            _
            Pass in every used signal comma seperated like this:
            InitializeSignalHandles(signal1, signal2, ...); and call it
            within the PreExecution(..) method of the testcase.
            </summary>
            <param name="signals"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.LogTest(BT_CSB_Tools.CSharpTestbench.LogTestDelegate,System.String)">
            <summary>
            Logs the result of the LogTestDelegate with additional parameters, comments, arguments
            </summary>
            <param name="testDelegate"></param>
            <param name="comment"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.LogTest(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Logs the result of the boolean with additional parameters, comments, arguments
            </summary>
            <param name="result"></param>
            <param name="parameters"></param>
            <param name="comment"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.LogTest(System.Boolean)">
            <summary>
            Logs the result of the boolean.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.ReadAtomic(System.Collections.Generic.List{BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic})">
            <summary>
            <para>_</para>
            <para>This method reads a list of atomic signals and returns a dictionary of string/object</para>
            <para>Each key/value-pair of the dictionary holds signal name and the actual signal value.</para>
            </summary>
            <param name="signals"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.ReadAtomic(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic[])">
            <summary>
            <para>_</para>
            <para>This method reads a list of atomic signals and returns a dictionary of string/object</para>
            <para>Each key/value-pair of the dictionary holds signal name and the actual signal value.</para>
            </summary>
            <param name="signals"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.ReadAtomic(System.Collections.Generic.List{BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic},System.Boolean)">
            <summary>
            <para>_</para>
            <para>This method reads a list of atomic signals and returns a list of values.</para>
            </summary>
            <param name="signals"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.ReadAtomic(System.Boolean,BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic[])">
            <summary>
            <para>_</para>
            <para>This method reads a list of atomic signals and returns a list of values.</para>
            </summary>
            <param name="valuesOnly"></param>
            <param name="signals"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.ResetSignal(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal)">
            <summary>
            Resets passed signal.
            </summary>
            <param name="signal"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.ResetAllSignals(BT_CSB_Tools.SignalPoolGenerator.Clients.IClient)">
            <summary>
            Resets all signals. 
            Resets all signals on a specific client, if passed.
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.ResetAll(BT_CSB_Tools.SignalPoolGenerator.Clients.IClient)">
            <summary>
            Resets all signals. 
            Resets all signals on a specific client, if passed.
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.SetSignalsOnConsist(System.Collections.Generic.List{BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic},System.Int32[])">
            <summary>
            Set's signals on given consists/clients indices
            </summary>
            <param name="signals"></param>
            <param name="indicies"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.SetSignalsOnConsist(System.Int32[],BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic[])">
            <summary>
            Set's signals on given consists/clients indices
            </summary>
            <param name="indicies"></param>
            <param name="signals"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.SetSignalOnConsist(System.Collections.Generic.List{BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic},System.Int32)">
            <summary>
            Set's signals on given consist/client index
            </summary>
            <param name="signals"></param>
            <param name="index"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.SetSignalOnConsist(System.Int32,BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic[])">
            <summary>
            Set's signals on given consist/client index
            </summary>
            <param name="index"></param>
            <param name="signals"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.UnforceAll(BT_CSB_Tools.SignalPoolGenerator.Clients.IClient)">
            <summary>
            <para>_</para>
            <para>This method unforces all signals on all clients.</para>
            <para>_</para>
            <para>Optional: 'client = x' if specified, only signals on given client are unforced.</para>
            </summary>
            <param name="iclient"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.UnforceAtomic(System.Collections.Generic.List{BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic})">
            <summary>
            <para>_</para>
            <para>This method unforces all signals from a given list of atomic signals.</para>
            <para>_</para>
            </summary>
            <param name="signals"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.UnforceAtomic(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic[])">
            <summary>
            <para>_</para>
            <para>This method unforces all signals from a given list of atomic signals.</para>
            <para>_</para>
            </summary>
            <param name="signals"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.UnforceAtomic(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal[])">
            <summary>
            <para>_</para>
            <para>This method unforces all signals from a given list of basesignals.</para>
            <para>_</para>
            </summary>
            <param name="signals"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.UnforceSignal(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal)">
            <summary>
            This method unforces the given signal.
            </summary>
            <param name="signal"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.WaitForCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal,BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,System.Object,System.Double,System.Int32)">
            <summary>
            <para>_</para>
            <para>This method waits as long as the timeout until the value of a signal reaches the given value and condition.</para>
            <para>_</para>
            <para>Returns 'True' immediately if the value reached the given value and condition within the timeout.</para>
            <para>Returns 'False' after the timeout if the signal value is unequal to the given value and condition.</para>
            <para>_</para>
            <para>Optional: 'interval = x' specifies the reading interval every x = milisecond</para>
            </summary>
            <param name="signal"></param>
            <param name="condition"></param>
            <param name="value"></param>
            <param name="timeout"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.WaitForConditionAtomic(System.Collections.Generic.List{BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic},System.Double,System.Int32)">
            <summary>
            <para>_</para>
            <para>This method waits as long as the timeout(ms) until the values of the atomic signal list reaches the given values and conditions.</para>
            <para>_</para>
            <para>Each 'Atomic' object of the list defines a specified 'Is' condition/operator.</para>
            <para>Also each 'Atomic' object defines the value to be checked.</para>
            <para>_</para>
            <para>Returns 'True' immediately if all signal values reached given values and conditions within the timeout.</para>
            <para>Returns 'False' after timeout if one of the signal values is unequal to the given value and condition.</para>
            <para>_</para>
            <para>Optional: 'interval = x' specifies the reading interval every x = milisecond</para>
            </summary>
            <param name="signals"></param>
            <param name="timeout"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.WaitForConditionAtomic(System.Double,System.Int32,BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic[])">
            <summary>
            <para>_</para>
            <para>This method waits as long as the timeout(ms) until the values of the atomic signal list reaches the given values and conditions.</para>
            <para>_</para>
            <para>Each 'Atomic' object of the list defines a specified 'Is' condition/operator.</para>
            <para>Also each 'Atomic' object defines the value to be checked.</para>
            <para>_</para>
            <para>Returns 'True' immediately if all signal values reached given values and conditions within the timeout.</para>
            <para>Returns 'False' after timeout if one of the signal values is unequal to the given value and condition.</para>
            <para>_</para>
            <para>Optional: 'interval = x' specifies the reading interval every x = milisecond</para>
            </summary>
            <param name="timeout"></param>
            <param name="interval"></param>
            <param name="signals"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.WaitForConditionAtomic(System.Collections.Generic.List{BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic},System.Int32)">
            <summary>
            <para>_</para>
            <para>This method waits (min/max timeout) until the values of the atomic signal list reaches the given values and conditions.</para>
            <para>_</para>
            <para>Each 'Atomic' object of the list defines a specified 'Is' condition/operator.</para>
            <para>Each 'Atomic'defines a specified value to be checked.</para>
            <para>Also each 'Atomic' object needs to specify a timeout.</para>
            <para>_</para>
            <para>Returns 'True' immediately if all signal values reached given values and conditions within the max timeout.</para>
            <para>Returns 'False' after the (min/max) if one of the signal values is unequal to the given value and condition.</para>
            <para>_</para>
            <para>Optional: 'interval = x' specifies the reading interval every x = milisecond</para>
            </summary>
            <param name="signals"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.WaitForConditionAtomic(System.Int32,BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic[])">
            <summary>
            <para>_</para>
            <para>This method waits (min/max timeout) until the values of the atomic signal list reaches the given values and conditions.</para>
            <para>_</para>
            <para>Each 'Atomic' object of the list defines a specified 'Is' condition/operator.</para>
            <para>Each 'Atomic'defines a specified value to be checked.</para>
            <para>Also each 'Atomic' object needs to specify a timeout.</para>
            <para>_</para>
            <para>Returns 'True' immediately if all signal values reached given values and conditions within the max timeout.</para>
            <para>Returns 'False' after the (min/max) if one of the signal values is unequal to the given value and condition.</para>
            <para>_</para>
            <para>Optional: 'interval = x' specifies the reading interval every x = milisecond</para>
            </summary>
            <param name="interval"></param>
            <param name="signals"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.WaitForExpressionAtomic(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.AtomicExpression,System.Double,System.Int32)">
            <summary>
            <para>_</para>
            <para>This method waits as long as the given timeout until the values of the atomic signal list meet the specified expression.</para>
            <para>_</para>
            <para>An 'AtomicExpression' can be specified like the following example:</para>
            <para>_</para>
            <para>Client1.Signal1.Atomic >= 5 | Brackets(Client2.Signal2.Atomic == 8 &amp; !(Client2.Signal3.Atomic == 1))</para>
            <para>_</para>
            <para>The AND expression is represented by a single "&amp;"</para>
            <para>The OR  expression is represented by a single "|"</para>
            <para>The NEGATION expr. is represented by a single "!" before a paranthesis ()</para>
            <para>Use the keyword Brackts(...) to group signals into one boolean expression.</para>
            <para>_</para>
            <para>Returns 'True' immediately if all signal values reached specified expression within the timeout.</para>
            <para>Returns 'False' after the timeout if one of the signal values do not met the specified  expression.</para>
            <para>_</para>
            <para>Optional: 'interval = x' specifies the reading interval every x = milisecond</para>
            </summary>
            <param name="expression"></param>
            <param name="timeout"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.WaitForSignal(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal,System.Object,System.Double,System.Int32)">
            <summary>
            <para>_</para>
            <para>This method waits for a given timeout(ms) until the value of a signal reaches the specified value.</para>
            <para>_</para>
            <para>Returns 'True' immediately if the signal value equals the given value within the timeout.</para>
            <para>Returns 'False' after the timeout, if the signal value is unequal to the given value.</para>
            <para>_</para>
            <para>Optional: 'interval = x' specifies the reading interval every x = milisecond</para>
            </summary>
            <param name="signal"></param>
            <param name="value"></param>
            <param name="timeout"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.WaitForSignalAtomic(System.Collections.Generic.List{BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic},System.Double,System.Int32)">
            <summary>
            <para>_</para>
            <para>This method waits until the values of the atomic signal list reaches the given values.</para>
            <para>_</para>
            <para>Each 'Atomic' object of the list defines a specified value which is checked to equality.</para>
            <para>_</para>
            <para>Returns 'True' immediately if all signal values reached given values within the timeout.</para>
            <para>Returns 'False' after the timeout if one of the signal values is unequal to the given value.</para>
            <para>_</para>
            <para>Optional: 'interval = x' specifies the reading interval every x = milisecond</para>
            </summary>
            <param name="signals"></param>
            <param name="timeout"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.WaitForSignalAtomic(System.Double,System.Int32,BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic[])">
            <summary>
            <para>_</para>
            <para>This method waits until the values of the atomic signal list reaches the given values.</para>
            <para>_</para>
            <para>Each 'Atomic' object of the list defines a specified value which is checked to equality.</para>
            <para>_</para>
            <para>Returns 'True' immediately if all signal values reached given values within the timeout.</para>
            <para>Returns 'False' after the timeout if one of the signal values is unequal to the given value.</para>
            <para>_</para>
            <para>Optional: 'interval = x' specifies the reading interval every x = milisecond</para>
            </summary>
            <param name="timeout"></param>
            <param name="interval"></param>
            <param name="signals"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.WaitForSignalAtomic(System.Collections.Generic.List{BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic},System.Int32)">
            <summary>
            <para>_</para>
            <para>This method waits until the values of the atomic signal list reaches the given values.</para>
            <para>_</para>
            <para>Each 'Atomic' object of the list defines a specified value which is checked to equality.</para>
            <para>Also each 'Atomic' object of the atomic signals list needs to specify a timeout.</para>
            <para>_</para>
            <para>Returns 'True' immediately if all signal values reached given values within the max timeout.</para>
            <para>Returns 'False' after the (min/max) if one of the signal values is unequal to the given value.</para>
            <para>_</para>
            <para>Optional: 'interval = x' specifies the reading interval every x = milisecond</para>
            </summary>
            <param name="signals"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.WaitForSignalAtomic(System.Int32,BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic[])">
            <summary>
            <para>_</para>
            <para>This method waits until the values of the atomic signal list reaches the given values.</para>
            <para>_</para>
            <para>Each 'Atomic' object of the list defines a specified value which is checked to equality.</para>
            <para>Also each 'Atomic' object of the atomic signals list needs to specify a timeout.</para>
            <para>_</para>
            <para>Returns 'True' immediately if all signal values reached given values within the max timeout.</para>
            <para>Returns 'False' after the (min/max) if one of the signal values is unequal to the given value.</para>
            <para>_</para>
            <para>Optional: 'interval = x' specifies the reading interval every x = milisecond</para>
            </summary>
            <param name="interval"></param>
            <param name="signals"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.WriteAtomic(System.Collections.Generic.List{BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic})">
            <summary>
            <para>_</para>
            <para>This method writes a list of atomic signals which holds the values to be written.</para>
            </summary>
            <param name="signals"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.WriteAtomic(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic[])">
            <summary>
            <para>_</para>
            <para>This method writes a list of atomic signals which holds the values to be written.</para>
            </summary>
            <param name="signals"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.WriteClientThread(System.Object)">
            <summary>
            This writing method for each client thread.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.Wait(System.Int32)">
            <summary>
            <para>_</para>
            <para>This method waits for the given timeout of miliseconds.</para>
            </summary>
            <param name="ms"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.Wait(System.Int32,BT_CSB_Tools.Logging.TimeUnit)">
            <summary>
            <para>_</para>
            <para>This method waits for the given timeout at the given time unit.</para>
            </summary>
            <param name="value"></param>
            <param name="unit"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.Wait_Realtime(System.Int32)">
            <summary>
            Waits for the specified duration. The duration will always be real (natural) time,
            ALSO in case of simulated time (see Wait() for simulated time).
            </summary>
            <param name="ms"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.Wait_Realtime(System.Int32,BT_CSB_Tools.Logging.TimeUnit)">
            <summary>
            Waits for the specified duration. The duration will always be real (natural) time,
            ALSO in case of simulated time (see Wait() for simulated time).
            </summary>
            <param name="value"></param>
            <param name="unit"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.WaitForAcknowledgement(System.String)">
            <summary>
            Opens up a dialog with the given message
            Stays open until the user confirms by pressing the OK button.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.WaitForVerification(System.String)">
            <summary>
            Opens up a dialog with the given message
            User can choose between Yes/No
            GlobalTestResult get's set depending on dialig result.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.RunDebugger">
            <summary>
            This method allows to debug the testcase just in time.
            Please get sure that Debugger.Launch(); is called within this method!
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._clients">
            <summary>
            This dictionary holds all instantiated clients
            Key is the client name.
            Value is type of iclient
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._consists">
            <summary>
            This dictionary holds all instantiated tcms containers
            Key is a integer, so we can access signals like this: Consist[0]
            Value is type of SignalTcmsContainer. So that will be possible: Consist[0][Signame].Value
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._parsedsignals">
            <summary>
            This dictionary holds all instantiated base signal tcms containers
            Key is a string, so we can access parsed signals like this: Signals["Client"]
            Value is type of BaseSignalTcmsContainer.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._configurations">
            <summary>
            This dictionary hold the "config info header" for each client configuration xml file.
            Key is the name of the client
            Value is the "config info header" string
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._positions">
            <summary>
            This dictionary holds the position of a client for the _consist dictionary
            So its possible to switch for example positions in _consist dictionary.
            Key is the name of the client.
            Value is the position.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._orientation">
            <summary>
            This dictionary holds the orientation.
            Key is the position
            Value is the orientation string.
            This dictionary is just for information purposes.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._consisttype">
            <summary>
            This dictionary holds the orientation.
            Key is the position
            Value is the consist type string.
            This dictionary is just for information purposes.
            </summary>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "F:BT_CSB_Tools.CSharpTestbench._forcedSignals" ignoriert -->
        <member name="F:BT_CSB_Tools.CSharpTestbench._renamedSignals">
            <summary>
            This dictionary holds all renamed signals of a signalpool.
            Some signals could get renamed while signalpool is generated.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._renamedNamespaces">
            <summary>
            This dictionary holds all manual renamed client namespaces.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._subscribedSignals">
            <summary>
            This object manages signal subscriptions for the reading thread.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._signalsRecorder">
            <summary>
            This class records all signal subscriptions of the reading thread.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._configPath">
            <summary>
            The filePath to the signalpool config file.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._assemblyPath">
            <summary>
            The filePath to current assembly filePath.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._readingThreadSuspended">
            <summary>
            This boolean holds the state of the reading thread.
            True -> if reading thread is suspended
            False -> if reading thread is running
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._suspendReadingThread">
            <summary>
            This boolean make it possible to suspend the reading thread.
            If set -> True, reading thread will suspend after last read.
            If set -> False, reading thread will continue after next iteration
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._shutdownReadingTimer">
            <summary>
            This boolean handles shut down of the reading timer (TimeSyncTimer)
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._cyclicReadingTimer">
            <summary>
            This is the cyclic reading time.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._readingThread">
            <summary>
            This is the thread for reading signals cyclic
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._testcaseThread">
            <summary>
            This is the thread for the testcase.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._mainThread">
            <summary>
            This is the main thread.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._mainAssembly">
            <summary>
            This is the main assembly
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._referendedAssmblies">
            <summary>
            All other referenced assemblies
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._logWindow">
            <summary>
            This is the gui log window object
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._logWindowThread">
            <summary>
            This is the thread, in which the gui log window is spawned.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._windowLoaded">
            <summary>
            This boolean hold true, of gui log window has spawned.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._xmlConfig">
            <summary>
            This object reads/writes the signalpool.CONFIG.XML file
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._logger">
            <summary>
            This is the private field for the logger.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._mainType">
            <summary>
            This holds the type of the executing assembly
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._mainName">
            <summary>
            This holds the name of the executing testcase
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._consoleHandle">
            <summary>
            This holds the console handle
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._readingThreads">
            <summary>
            A list of threads reading client values.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._readingFailCount">
            <summary>
            A counter for failed read attempts.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._customThreads">
            <summary>
            A list of custom threads.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.CSharpTestbench"/> class. 
            Initialisiert eine neue Instanz der <see cref="T:BT_CSB_Tools.CSharpTestbench"/> Klasse. 
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.CSharpTestbench"/> class.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.CyclicReaderThread(System.Int32)">
            This is the cyclic reading thread.
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.ReadClientThread(System.Object)">
            <summary>
            This is the reading method for each client thread.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.LogWindowThread">
            <summary>
            This is the thread for the GuiLogWindow
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.LogWindowLoaded(System.Object,System.EventArgs)">
            <summary>
            Raises, if LogWindow has loaded succesfully.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.StartLogging">
            <summary>
            Starts logging.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.StartLogging(BT_CSB_Tools.ITestCaseViewModel@)">
            <summary>
            Starts logging with provided viewmodel. This method is used by TestcaseRunner.
            </summary>
            <param name="viewmodel"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.EndLogging(System.Boolean)">
            <summary>
            Ends logging.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.TestcaseThread">
            <summary>
            This is the running thread for the testcase.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.CSharpTestbench._testcaseResult">
            <summary>
            Helper field and property for the global test result 
            DO NOT USE this field to SET the GTR! Use the "GlobalTestResult" property.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.TestcaseThreadForRunner">
            <summary>
            This is the running thread for the TestcaseRunner.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.Start(BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel)">
            <summary>
            Starts the test case and the logger manually.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.Start(BT_CSB_Tools.ITestCaseViewModel@)">
            <summary>
            Starts the test case with provided viewmodel. This methods gets used by the TestcaseRunner.
            </summary>
            <param name="viewmodel"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.StartReadingThread(System.Int32)">
            <summary>
            Starts  the reading thread with given cycle time in ms.
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.StopReadingThread">
            <summary>
            Stops  the reading thread by aborting the reader thread.
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.SuspendReadingThread(System.Boolean)">
            <summary>
            Suspends the cyclic reading thread, resumes it also.
            </summary>
            <param name="suspend"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.InitializeFTPWrapper">
            <summary>
            This initializes the ftp wrapper with a provided UCpath from testinfo.xml file.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.TestcasePauseResumeAbort(System.Boolean,System.Boolean)">
            <summary>
            This method toogles the running state of a testcase between running/paused.
            If abort is provided with true, the testcase will get aborted.
            </summary>
            <param name="abort"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.TryChangeType(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal,System.Object,System.Object@,System.Boolean)">
            <summary>
            This method trys to change the type of a given value to the type the signal value holds.
            If type change succeds, value can be set to signal.
            If silentException is set to true, no exception will raise.
            </summary>
            <param name="signal"></param>
            <param name="value"></param>
            <param name="outValue"></param>
            <param name="silentException"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.Brackets(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.AtomicExpression)">
            <summary>
            Brackets are used for the WaitForExpressionAtomic to group signals into one boolean expression.
            <para>_</para>
            <para>An 'Brackets' expression can be specified like the following example:</para>
            <para>_</para>
            <para>Brackets(Client2.Signal2.Atomic == 8 &amp; !(Client2.Signal3.Atomic == 1))</para>
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.EnableDisableTimeSyncTimer(System.Boolean)">
            <summary>
            Enable or Disable the TimeSyncTimer. This affects all c# testbench methods.
            </summary>
            <param name="status"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.TraceText(System.String,System.Object[])">
            <summary>
            Writes the provied comment to the gui log window and to the xml/html log file.
            </summary>
            <param name="comment"></param>
            <param name="args"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.TraceWarning(System.String,System.Object[])">
            <summary>
            Writes the provied comment to the gui log window and to the xml/html log file as a warning.
            </summary>
            <param name="comment"></param>
            <param name="args"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.TraceError(System.String,System.Object[])">
            <summary>
            Writes the provied comment to the gui log window and to the xml/html log file as an error.
            </summary>
            <param name="comment"></param>
            <param name="args"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.TraceInfo(System.String,System.Object[])">
            <summary>
            Writes the provied comment as a info command to the gui log window and to the xml/html log file.
            </summary>
            <param name="comment"></param>
            <param name="args"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.TraceHeader(System.String,System.Object[])">
            <summary>
            Writes the provied comment as a header command to the gui log window and to the xml/html log file.
            </summary>
            <param name="comment"></param>
            <param name="args"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.TraceReport(System.String,System.Object[])">
            <summary>
            Writes the provied comment as a report command to the gui log window and to the xml/html log file.
            </summary>
            <param name="comment"></param>
            <param name="args"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.Trace(System.String,System.Object[])">
            <summary>
            Writes the provied comment as a trace command to the gui log window and to the xml/html log file.
            </summary>
            <param name="comment"></param>
            <param name="args"></param>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.TraceReferencedAssemblyVersions(System.Boolean)">
            <summary>
            Writes the version properties of all referenced assemblies, except the ones from microsoft and telerik
            </summary>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:BT_CSB_Tools.CSharpTestbench.TraceUnReferencedAssemblyVersions" ignoriert -->
        <member name="M:BT_CSB_Tools.CSharpTestbench.Dispose">
            <summary>
            Disposes the hole c# testbench. Clients are disconnected. Gui is closed. All used ressources are set free.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.InitializeClients(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initialize client from ressources of generated signalpool.
            All necessary values like ip adress, config file and so on are within the ressources.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.ConnectClients">
            <summary>
            Connect all instantiated clients.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.InitializeLogger(System.Boolean,System.Boolean)">
            <summary>
            This initializes the logger with a provided testinfo.xml file.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.CompareValues(System.Object,System.Object,BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is)">
            <summary>
            Compares two values with the given 'Is'-operator
            Returns 'True' if values meet specified condition
            Returns 'False' if compare fails.
            </summary>
            <param name="valueA"></param>
            <param name="valueB"></param>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.Compare(System.Object,System.Object,BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is)">
            <summary>
            Compares two values with the given 'Is'-operator
            Returns 'True' if values meet specified condition
            Returns 'False' if compare fails.
            </summary>
            <param name="valueA"></param>
            <param name="valueB"></param>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.CompareArray(System.Object,System.Object,BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is)">
            <summary>
            Compares two arrays with the given 'Is'-operator
            Returns 'True' if arrays meet specified condition
            Returns 'False' if compare fails.
            </summary>
            <param name="valueA"></param>
            <param name="valueB"></param>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.Compare(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal,System.Object,System.Object,BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,BT_CSB_Tools.Logging.LogSignal)">
            Compares two values with the given 'Is'-operator
            and logs the result to corresponding properties.
            Returns 'True' if values meet specified condition
            Returns 'False' if compare fails.
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.ToString(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is)">
            <summary>
            Is enum to boolean expr.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.ShowWindow(System.IntPtr,System.Int32)">
            <summary>
            Show / Hide Logwindow.
            </summary>
            <param name="hWnd"></param>
            <param name="nCmdShow"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.CSharpTestbench.GetConsoleWindow">
            <summary>
            Get pointer to console window.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.IsRunning">
            <summary>
            Gets a boolean, which indicates that the testcase is running.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.IsAborted">
            <summary>
            Gets a boolean, which indicates that the testcase is aborted.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.IsPaused">
            <summary>
            Gets a boolean, which indicates that the testcase is paused.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.IsDisposing">
            <summary>
            Gets a boolean, which indicates that the testbench is disposing.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.IsInternal">
            <summary>
            Gets a boolean, which indicates that the testbench is internally initialized.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.IsProvider">
            <summary>
            Gets a boolean, which indicates that this testbench is a code provider for the MTF
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.IsTracing">
            <summary>
            Gets/Sets a boolean, which indicates that the testbench is tracing the stack with every method call
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.Logger">
            <summary>
            Gets the logger of the c# testbench.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.TestInfo">
            <summary>
            Gets the testinfo object, which provides information for the logger.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.FTPWrapper">
            <summary>
            Get the ftp wrapper for user code uploads.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.Clients">
            <summary>
            Gets all referenced and interfaced clients
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.ClientsAll">
            <summary>
            Gets all referenced and interfaced clients, even from sub-testbench objects like SignalPoolInternal
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.Client">
            <summary>
            Gets a dictionary of the interfaced clients.
            Key is the name of the client
            Value is the IClient internface
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.Position">
            <summary>
            Gets a dictionary which holds the position of a IClient interface.
            Key is the name of the client
            Value is the position of the client
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.Orientation">
            <summary>
            Gets a dictionary, which holds the orientation of a client
            Key is the orientation
            Value is the name of the client
            This dictionary is still for information purposes only.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.ConsistType">
            <summary>
            Gets a dictionary, which holds the consist type of a client
            Key is the index
            Value consist type
            This dictionary is still for information purposes only.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.Configuration">
            <summary>
            Gets a dictionary, which holds the configuration header of a client config xml file.
            Key is the client name
            Value is the configuration header
            This dictionary is still for information purposes only.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.ConsistPart">
            <summary>
            Gets the ConistPart which makes code anotations like this possible:
            ConsistPart[0]["SIGNALNAME"].Value
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.Consist">
            <summary>
            Gets the Conist which makes code anotations like this possible:
            Consist[0]["SIGNALNAME"].Value
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.ParsedSignals">
            <summary>
            Gets the Conist which makes code anotations like this possible:
            Consist[0]["SIGNALNAME"].Value
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.SignalPoolConfiguration">
            <summary>
            Get the object, which holds the information of a signal pool config xml file.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.Logfile">
            <summary>
            Gets the filePath to the xml log file.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.ForcedSignals">
            <summary>
            Gets or sets the forced signals.
            Key is type of IClient interface
            Value is type of ...
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.RenamedSignals">
            <summary>
            This dictionary holds all renamed signals of a signalpool.
            Some signals could get renamed while signalpool is generated.
            Key is the real signal name
            Value is the renamed signal name
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.RenamedNamespaces">
            <summary>
            This dictionary holds all manual renamed client namespaces.
            Key is the generated namespace
            Value is the renamed namespace
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.SubscribedSignals">
            <summary>
            This object manages signal subscriptions for the reading thread.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.SignalRecorder">
            <summary>
            This class records all signal subscriptions of the reading thread.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.MainThread">
            <summary>
            Gets the main thread
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.TestThread">
            <summary>
            Gets the testcase thread, so suspend and resume is possible
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.GlobalTestResult">
            <summary>
            The global test result. MUST be used to SET the testcase result.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.CSharpTestbench.Testbench">
            <summary>
            The static main test bench object
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.ExceptionHandler.EErrorCodes.NotAllSignalsAreEqualError">
            <summary>
            WaitForSignalAtomic(): Not all signals in the signals list meet the condition "Is.Equal"!
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.ExceptionHandler.ExceptionHandler">
            <summary>
            The exception handler.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.ExceptionHandler.ExceptionHandler.Lazy">
            <summary>
            The lazy.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.ExceptionHandler.ExceptionHandler.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:BT_CSB_Tools.ExceptionHandler.ExceptionHandler"/> class from being created.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.ExceptionHandler.ExceptionHandler.ApplicationDispatcherUnhandledException(System.Object,System.Windows.Threading.DispatcherUnhandledExceptionEventArgs)">
            <summary>
            The application dispatcher unhandled exception.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.ExceptionHandler.ExceptionHandler.CurrentDomainUnhandledException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            The current domain unhandled exception.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="P:BT_CSB_Tools.ExceptionHandler.ExceptionHandler.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.ExceptionHandler.ExceptionHandler.DoHandleUnhandledExceptions">
            <summary>
            Gets or sets a value indicating whether do handle unhandled exceptions.
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.ExceptionHandler.ExceptionHandlerWindow">
            <summary>
            Interaktionslogik für ExceptionHandlerWindow.xaml
            </summary>
            <summary>
            ExceptionHandlerWindow
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.ExceptionHandler.ExceptionHandlerWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.ExceptionWindow">
            <summary>
            Interaction logic for ExceptionWindow.xaml
            </summary>
            <summary>
            ExceptionWindow
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.ExceptionWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.TestcaseException">
            <summary>
            The testcase exception class will print detailed information about
            the exception, from which method it comes from, the line number and
            file name of the csharp class file. PDB files are needed, to print
            those informations!
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.TestcaseException.#ctor(System.String,System.Boolean,System.UInt32)">
            <summary>
            The testcase exception class will print detailed information about
            the exception, from which method it comes from, the line number and
            file name of the csharp class file. PDB files are needed, to print
            those informations!
            </summary>
            <param name="excpetionMessage"></param>
            <param name="abortTestcase"></param>            
            <param name="stackTraceDepth"></param>
        </member>
        <member name="T:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Commands.CustomCommands">
            <summary>
            The custom commands.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Commands.CustomCommands.Exit">
            <summary>
            The exit.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Commands.CustomCommands.PauseResume">
            <summary>
            The exit.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Commands.CustomCommands.PauseScrolling">
            <summary>
            The exit.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Commands.CustomCommands.RunDebugger">
            <summary>
            
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel">
            <summary>
            The gui log item model. MarshalByRefObject,
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel._answer">
            <summary>
            The _answer.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel._command">
            <summary>
            The _command.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel._comment">
            <summary>
            The _comment.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel._counter">
            <summary>
            The _counter.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel._question">
            <summary>
            The _question.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel._result">
            <summary>
            The _result.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel._time">
            <summary>
            The _time.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel._hasProgressBar">
            <summary>
            The progressbar boolean
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel._progressBarValue">
            <summary>
            The progressbar value in %
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel._progressBarVisibility">
            <summary>
            The progressbar visibility
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel._textBlockVisibility">
            <summary>
            The textblock visibility
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel._rowDetailsVisible">
            <summary>
            The row details visibility
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel._toggleButtonVisible">
            <summary>
            The row details visibility
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel.Answer">
            <summary>
            Gets or sets the answer.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel.Command">
            <summary>
            Gets or sets the command.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel.Counter">
            <summary>
            Gets or sets the counter.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel.Question">
            <summary>
            Gets or sets the question.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel.Result">
            <summary>
            Gets or sets the result.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.GuiLogItemModel.Time">
            <summary>
            Gets or sets the time.
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel">
            <summary>
            The gui log view model.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel._currentDispatcher">
            <summary>
            The _current dispatcher.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel._guiLogItems">
            <summary>
            The _gui log row.
            // TODO: SH: Logger
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel._guiLogFiltered">
            <summary>
            filtered gui log items;
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel._header">
            <summary>
            The _header.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel._selectedGuiLogRow">
            <summary>
            The _selected gui log row.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel._status">
            <summary>
            The _status field backing the Status property.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel._testcaseIsPaused">
            <summary>
            The _testcaseIsPaused field backing the TestcaseIsPaused property.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel._testcaseIsRunning">
            <summary>
            The _testcaseIsRunning field backing the TestcaseIsRunning property.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel._progressBarItems">
            <summary>
            The last progressbar item
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel"/> class.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel.NotifyPropertyChanged(System.Object,System.String)">
            <summary>
            The notify property changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="name">
            The name.
            </param>
            This method executes the PropertyChanged-Event with the name of the property
            The sender of the event
            The string of the property whichs value changed
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel.GuiLogItems">
            <summary>
            Gets or sets the gui log row.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel.Header">
            <summary>
            Gets or sets the header.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel.SelectedGuiLogRow">
            <summary>
            Gets or sets the selected gui log row.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel.Status">
            <summary>
            Gets or sets the Status.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel.TestcaseIsPaused">
            <summary>
            Gets or sets a value indicating whether the TestcaseIsPaused.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel.TestcaseIsRunning">
            <summary>
            Gets or sets a value indicating whether  the TestcaseIsRunning.
            </summary>
        </member>
        <member name="E:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel.PropertyChanged">
            <summary>
            The property changed.
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.ViewModel.GuiLogViewModel.NotifyPropertyChangedDeleagte">
            <summary>
            The notify property changed deleagte.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="T:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.TestcaseHeaderModel">
            <summary>
            The testcase header model.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.TestcaseHeaderModel._error">
            <summary>
            The _error.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.TestcaseHeaderModel._asv">
            <summary>
            The _asv field backing the ASV property.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.TestcaseHeaderModel._author">
            <summary>
            The _author field backing the Author property.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.TestcaseHeaderModel._date">
            <summary>
            The _date field backing the Date property.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.TestcaseHeaderModel._config">
            <summary>
            The _config field backing the Description property.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.TestcaseHeaderModel._name">
            <summary>
            The name of the testcase.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.TestcaseHeaderModel._project">
            <summary>
            The _project field backing the Project property.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.TestcaseHeaderModel._rack">
            <summary>
            rack backing field
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.TestcaseHeaderModel.ASV">
            <summary>
            Gets or sets the ASV.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.TestcaseHeaderModel.Author">
            <summary>
            Gets or sets the Author.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.TestcaseHeaderModel.Date">
            <summary>
            Gets or sets the Date.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.TestcaseHeaderModel.Config">
            <summary>
            Gets or sets the Configuration.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.TestcaseHeaderModel.Rack">
            <summary>
            Gets or sets the Rack.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.TestcaseHeaderModel.Error">
            <summary>
            Ruft eine Fehlermeldung ab, die den Fehler in diesem Objekt angibt.
            </summary>
            <returns>
            Eine Fehlermeldung, die den Fehler in diesem Objekt angibt.Der Standardwert ist eine leere Zeichenfolge ("").
            </returns>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.TestcaseHeaderModel.Name">
            <summary>
            Gets or sets the name of the testcase.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.TestcaseHeaderModel.Project">
            <summary>
            Gets or sets the Project.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.Model.TestcaseHeaderModel.Item(System.String)">
            <summary>
            Ruft die Fehlermeldung für die Eigenschaft mit dem angegebenen Namen ab.
            </summary>
            <returns>
            Die Fehlermeldung für die Eigenschaft.Der Standardwert ist eine leere Zeichenfolge ("").
            </returns>
            <param name="columnName">
            Der Name der Eigenschaft, deren Fehlermeldung abgerufen werden soll. 
            </param>
        </member>
        <member name="T:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.View.GuiLogHeaderView">
            <summary>
            Interaktionslogik für GuiLogHeaderView.xaml
            </summary>
            <summary>
            GuiLogHeaderView
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.View.GuiLogHeaderView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.View.GuiLogItemView">
            <summary>
            Interaktionslogik für GuiLogItemView.xaml
            </summary>
            <summary>
            GuiLogItemView
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.View.GuiLogItemView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.View.GuiLogView">
            <summary>
            Interaktionslogik für GuiLogView.xaml
            </summary>
            <summary>
            GuiLogView
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.View.GuiLogView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.View.GuiLogView"/> class.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.View.GuiLogView._parent">
            <summary>
            The _parent field backing the Parent property.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.View.GuiLogView.UserControl_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The user control_ loaded.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.View.GuiLogView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.MVVM.View.GuiLogView.Parent">
            <summary>
            Gets or sets the Parent.
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Logging.Jenkins.failure">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.failure.type">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.failure.message">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.failure.Text">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Logging.Jenkins.error">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.error.type">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.error.message">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.error.Text">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Logging.Jenkins.properties">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.properties.property">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Logging.Jenkins.property">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.property.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.property.value">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Logging.Jenkins.testcase">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testcase.skipped">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testcase.error">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testcase.failure">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testcase.systemout">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testcase.systemerr">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testcase.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testcase.assertions">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testcase.time">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testcase.classname">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testcase.status">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Logging.Jenkins.testsuite">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuite.properties">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuite.testcase">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuite.systemout">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuite.systemerr">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuite.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuite.tests">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuite.failures">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuite.errors">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuite.time">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuite.disabled">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuite.skipped">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuite.timestamp">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuite.hostname">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuite.id">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuite.package">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Logging.Jenkins.testsuites">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuites.testsuite">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuites.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuites.time">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuites.tests">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuites.failures">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuites.disabled">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Logging.Jenkins.testsuites.errors">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.ISignalParser">
            <summary>
            The SignalParser interface.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Parser.ISignalParser.Clear">
            <summary>
            The clear.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Parser.ISignalParser.ClientType">
            <summary>
            Get the client type.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Parser.ISignalParser.ClientWrapperType">
            <summary>
            Get the client wrapper type.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Parser.ISignalParser.ClassType">
            <summary>
            Gets the class type.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Parser.ISignalParser.ConfigFile">
            <summary>
            The config file.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Parser.ISignalParser.ConfigFileObject">
            <summary>
            the parsed config file object.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Parser.ISignalParser.ConfigVersion">
            <summary>
            The config version.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Parser.ISignalParser.IPAddress">
            <summary>
            The ip address.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Parser.ISignalParser.SoftIP">
            <summary>
            The soft ip address.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Parser.ISignalParser.Namespace">
            <summary>
            The namespace.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Parser.ISignalParser.ConsistType">
            <summary>
            Consist Type
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Parser.ISignalParser.Orientation">
            <summary>
            Orientation
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Parser.ISignalParser.Delimiter">
            <summary>
            Gets the delimiter.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Parser.ISignalParser.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Parser.ISignalParser.ParsedSignals">
            <summary>
            Gets the parsed signals.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Parser.ISignalParser.MultiTractionSignals">
            <summary>
            Gets or sets mut signals.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Parser.ISignalParser.ClientSettings">
            <summary>
            Get the client settings.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.BusConfig.BusNavConfigParser._tf">
            <summary>
            mtti text file
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.BusConfig.BusNavConfigParser._ns">
            <summary>
            name space
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.BusConfig.BusNavConfigParser._ip">
            <summary>
            ip address
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.BusConfig.BusNavConfigParser._ct">
            <summary>
            consist type
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.BusConfig.BusNavConfigParser._ot">
            <summary>
            orientation
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.BusConfig.BusNavConfigParser._cf">
            <summary>
            config object
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.BusConfig.BusNavConfigParser._si">
            <summary>
            soft ip
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.BusConfig.BusNavConfigParser._cv">
            <summary>
            config version
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.BusConfig.BusNavConfigParser._ps">
            <summary>
            position
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.BusConfig.BusNavConfigParser._signals">
            <summary>
            parsed signals
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.BusConfig.BusNavConfigParser._parsed">
            <summary>
            boolean indicating if parsed or not
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.controlsignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.controlsignal.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.controlsignal.datatype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.controlsignal.defaultvalue">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.controlsignal.arraysize">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.infosignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.infosignal.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.infosignal.datatype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.infosignal.arraysize">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.datasignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.datasignal.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.datasignal.datatype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.datasignal.arraysize">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.rdisignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.rdisignal.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.rdisignal.datatype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.rdisignal.arraysize">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfig">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfig.consistlist">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfig.devicelist">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfig.emsignallist">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfig.presignallist">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfig.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfig.version">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfig.crc">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfig.mutconfigcrc">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigConsistlistConsist">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigConsistlistConsist.ipaddress">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigConsistlistConsist.orientation">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigConsistlistConsist.role">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDevice">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDevice.controlsignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDevice.infosignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDevice.businterfacelist">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDevice.tdsconfiguration">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDevice.mtti2configuration">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDevice.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDevice.role">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDevice.mvbaddress">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDevice.ecnuri">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceHWSignallistSignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceHWSignallistSignal.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceHWSignallistSignal.datatype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceHWSignallistSignal.comment">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceHWSignallistSignal.arraysize">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceHWSignallistSignal.alias">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceHWSignallistSignal.defaultvalue">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceHWSignallistSignal.offset">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterface">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterface.telegramlist">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterface.type">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.tdsconfiguration">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.tdsconfigurationsignallist.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.tdsconfigurationsignallist.datatype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.tdsconfigurationsignallist.comment">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.tdsconfigurationsignallist.arraysize">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram.controlsignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram.mdcontrolsignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram.mdstatussignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram.mdsourceipaddresssignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram.mdsourceurisingal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram.mddestinationipaddresssignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram.mddestinationurisignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram.sdlcontrolsignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram.sdlstatussignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram.sdlsmisignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram.sdlconsistidsignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram.sdlstcsignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram.signallist">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram.type">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram.port">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram.size">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram.period">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram.destinationipaddress">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegram.destinationuri">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMdcontrolsignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMdcontrolsignal.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMdcontrolsignal.datatype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMdcontrolsignal.defaultvalue">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMdstatussignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMdstatussignal.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMdstatussignal.defaultvalue">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMdstatussignal.datatype">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMdsourceipaddresssignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMdsourceipaddresssignal.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMdsourceipaddresssignal.datatype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMdsourceipaddresssignal.defaultvalue">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMdsourceipaddresssignal.arraysize">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMdsourceurisingal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMdsourceurisingal.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMdsourceurisingal.datatype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMdsourceurisingal.arraysize">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMdsourceurisingal.defaultvalue">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMddestinationipaddresssignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMddestinationipaddresssignal.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMddestinationipaddresssignal.datatype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMddestinationipaddresssignal.defaultvalue">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMddestinationipaddresssignal.arraysize">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMddestinationurisignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMddestinationurisignal.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMddestinationurisignal.datatype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMddestinationurisignal.arraysize">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramMddestinationurisignal.defaultvalue">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSdlcontrolsignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSdlcontrolsignal.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSdlcontrolsignal.datatype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSdlcontrolsignal.defaultvalue">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSdlstatussignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSdlstatussignal.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSdlstatussignal.datatype">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSdlsmisignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSdlsmisignal.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSdlsmisignal.datatype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSdlsmisignal.defaultvalue">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSdlconsistidsignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSdlconsistidsignal.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSdlconsistidsignal.datatype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSdlconsistidsignal.arraysize">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSdlstcsignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSdlstcsignal.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSdlstcsignal.datatype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSdlstcsignal.arraysize">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSignallistSignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSignallistSignal.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSignallistSignal.datatype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSignallistSignal.comment">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSignallistSignal.arraysize">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSignallistSignal.alias">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSignallistSignal.defaultvalue">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceBusinterfacelistBusinterfaceTelegramlistTelegramSignallistSignal.offset">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigEmsignallistEmsignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigEmsignallistEmsignal.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigEmsignallistEmsignal.datatype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigEmsignallistEmsignal.comment">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigEmsignallistEmsignal.alias">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigEmsignallistEmsignal.defaultvalue">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigEmsignallistEmsignal.arraysize">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigPreDefinedsignallistPredefinded">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigPreDefinedsignallistPredefinded.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigPreDefinedsignallistPredefinded.datatype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigPreDefinedsignallistPredefinded.comment">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigPreDefinedsignallistPredefinded.alias">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigPreDefinedsignallistPredefinded.defaultvalue">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigPreDefinedsignallistPredefinded.arraysize">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceMtti2configuration">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceMtti2configuration.applicationlist">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceMtti2configurationApplication">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceMtti2configurationApplication.grouplist">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceMtti2configurationApplication.name">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceMtti2configurationApplicationGroup">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceMtti2configurationApplicationGroup.signallist">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceMtti2configurationApplicationGroup.name">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceMtti2configurationApplicationGroupSignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceMtti2configurationApplicationGroupSignal.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceMtti2configurationApplicationGroupSignal.datatype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceMtti2configurationApplicationGroupSignal.Value">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceInfosignal">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceInfosignal.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceInfosignal.datatype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceInfosignal.defaultvalue">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceInfosignal.defaultvalueSpecified">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceInfosignal.readonly">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.FlConfig.flconfigDevicelistDeviceInfosignal.Value">
            <remarks/>
        </member>
        <member name="F:BT_CSB_Tools.Parser.MttiConfig.MttiConfigParser._tf">
            <summary>
            mtti text file
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.MttiConfig.MttiConfigParser._ns">
            <summary>
            name space
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.MttiConfig.MttiConfigParser._ip">
            <summary>
            ip address
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.MttiConfig.MttiConfigParser._ct">
            <summary>
            consist type
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.MttiConfig.MttiConfigParser._ot">
            <summary>
            orientation
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.MttiConfig.MttiConfigParser._cf">
            <summary>
            config object
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.MttiConfig.MttiConfigParser._si">
            <summary>
            soft ip
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.MttiConfig.MttiConfigParser._cv">
            <summary>
            config version
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.MttiConfig.MttiConfigParser._ps">
            <summary>
            position
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.MttiConfig.MttiConfigParser._signals">
            <summary>
            parsed signals
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.MttiConfig.MttiConfigParser._parsed">
            <summary>
            boolean indicating if parsed or not
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Parser.MutConfig.internal_rtsim_signals">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.MutConfig.internal_rtsim_signals.signallist">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.MutConfig.internal_rtsim_signals.name">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.MutConfig.internal_rtsim_signalsSig">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.MutConfig.internal_rtsim_signalsSig.type">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.MutConfig.internal_rtsim_signalsSig.typeSpecified">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.MutConfig.internal_rtsim_signalsSig.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.MutConfig.internal_rtsim_signalsSig.default">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.MutConfig.internal_rtsim_signalsSig.defaultSpecified">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.MutConfig.internal_rtsim_signalsSig.Value">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.Testinfo.TestInfoXml">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.Testinfo.TestInfoXml.Project">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.Testinfo.TestInfoXml.Asv">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.Testinfo.TestInfoXml.Configuration">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.Testinfo.TestInfoXml.Rack">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.Testinfo.TestInfoXml.Tester">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.Testinfo.TestInfoXml.Logpath">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.Testinfo.TestInfoXml.UCpath">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.Testinfo.TestInfoXml.Logwindow">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.Testinfo.TestInfoXml.LogSizeMaximum">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.Testinfo.TestInfoXml.LogEntriesMaximum">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.Testinfo.TestInfoXml.LogWindowAutoClose">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.Testinfo.TestInfoXml.HideConsoleWindow">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.Testinfo.TestInfoXml.LogDirectlyToDisk">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.Testinfo.TestInfoXml.CustomProperties">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.Testinfo.TestInfoXmlProperties">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.Testinfo.TestInfoXmlProperties.Any">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.TestInfoSource.TestInfoSource">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.TestInfoSource.TestInfoSource.Items">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.TestInfoSource.TestInfoSourceTestInfoItems">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.TestInfoSource.TestInfoSourceTestInfoItems.TestInfoItem">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.TestInfoSource.TestInfoSourceTestInfoItemsTestInfoItem">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.TestInfoSource.TestInfoSourceTestInfoItemsTestInfoItem.InfoItems">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.TestInfoSource.TestInfoSourceTestInfoItemsTestInfoItem.name">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.TestInfoSource.TestInfoSourceTestInfoItemsTestInfoItemInfoItemsItem">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.TestInfoSource.TestInfoSourceTestInfoItemsTestInfoItemInfoItemsItem.name">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:BT_CSB_Tools.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:BT_CSB_Tools.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:BT_CSB_Tools.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:BT_CSB_Tools.Annotations.MeansImplicitUseAttribute"/>
            or <see cref="T:BT_CSB_Tools.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:BT_CSB_Tools.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a filePath to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:BT_CSB_Tools.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Properties.Resources">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Properties.Resources.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Properties.Resources.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Properties.Resources.BT_CSB_Tools">
             <summary>
               Sucht eine lokalisierte Zeichenfolge, die &lt;?xml version=&quot;1.0&quot;?&gt;
            &lt;doc&gt;
                &lt;assembly&gt;
                    &lt;name&gt;BT_CSB_Tools&lt;/name&gt;
                &lt;/assembly&gt;
                &lt;members&gt;
                    &lt;member name=&quot;T:BT_CSB_Tools.CSharpTestbench&quot;&gt;
                        &lt;summary&gt;
                        The test bench.
                        &lt;/summary&gt;
                    &lt;/member&gt;
                    &lt;member name=&quot;M:BT_CSB_Tools.CSharpTestbench.CheckSignalsAtomic(System.Collections.Generic.List{BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic},System.Int32,System.Boolean)&quot;&gt;
                        &lt;summary&gt;
                        &lt;para&gt;_&lt;/para&gt; [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
             </summary>
        </member>
        <member name="P:BT_CSB_Tools.Properties.Resources.Class">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Properties.Resources.Folder">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Properties.Resources.Namespace">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Properties.Resources.sp_config">
             <summary>
               Sucht eine lokalisierte Zeichenfolge, die &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;xs:schema id=&quot;sp_config&quot;
                targetNamespace=&quot;http://schemas.datacontract.org/2004/07/BT_CSB_Tools.Utils.Xml&quot;
                elementFormDefault=&quot;qualified&quot;
                xmlns:bt=&quot;http://schemas.datacontract.org/2004/07/BT_CSB_Tools.Utils.Xml&quot;
                xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;
                xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;
            
              &lt;!-- the dataset definition --&gt;
              &lt;xs:element name=&quot;SignalPoolConfigDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:UseCurrentLocale=&quot;true&quot;&gt; [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
             </summary>
        </member>
        <member name="P:BT_CSB_Tools.Properties.Resources.TCMS_log">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die &lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; version=&quot;1.0&quot;&gt;
             &lt;xsl:output method=&quot;html&quot; indent=&quot;yes&quot; /&gt;
             &lt;xsl:template name=&quot;replace&quot;&gt;
               &lt;xsl:param name=&quot;input&quot;/&gt;
               &lt;xsl:param name=&quot;text&quot;/&gt;
               &lt;xsl:param name=&quot;by&quot;/&gt;
               &lt;xsl:choose&gt;
                 &lt;xsl:when test=&quot;not(contains($input, $text))&quot;&gt;
                   &lt;xsl:value-of select=&quot;$input&quot;/&gt;
                 &lt;/xsl:when&gt;
                 &lt;xsl:otherwise&gt;
                   &lt;xsl:value-of select=&quot;substring-before($input, $text)&quot;/&gt;
                   &lt;xsl:copy-of select=&quot;$by&quot;/&gt;
                  [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Properties.Resources.TestInfo">
             <summary>
               Sucht eine lokalisierte Zeichenfolge, die &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;xs:schema
            	id=&quot;TestInfo&quot;
                targetNamespace=&quot;urn:schemas-bt-de:testinfo&quot;
                elementFormDefault=&quot;qualified&quot;
                xmlns:bt=&quot;urn:schemas-bt-de:testinfo&quot;
                xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;
                xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;
            
              &lt;!-- the dataset definition --&gt;
              &lt;xs:element name=&quot;TestInfoDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:UseCurrentLocale=&quot;true&quot;&gt;
                &lt;xs:complexType&gt;
                  &lt;xs:choice minOccurs=&quot;1&quot; maxOccurs=&quot;1&quot;&gt;
                     [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
             </summary>
        </member>
        <member name="P:BT_CSB_Tools.Properties.Resources.TestInfoSource">
             <summary>
               Sucht eine lokalisierte Zeichenfolge, die &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;!-- 
            	The &apos;TestInfoSource.xml&apos; is used to feed the combo boxes which allows
            	to easily built &amp; modify the path where the log files will be saved. 
            	You can add new &apos;TestInfoItem&apos; nodes as much as you want. Each node
            	will become a combo box and will be filled with the values defined as &apos;Item&apos;.
            	
            	ATTENTION, do not delete following nodes because they are used as constant:
            						&quot;PROJECT&quot;	&quot;ASV&quot;	&quot;RACK&quot;	&quot;TESTER&quot;
                        
              ALSO use only names, that do not c [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
             </summary>
        </member>
        <member name="T:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient">
            <summary>
            The Client interface.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Connect">
            <summary>
            Connects to the client.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Disconnect">
            <summary>
            Disconnects the client.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.GetClone(System.Boolean,System.Boolean)">
            <summary>
            get a copy of the current client
            </summary>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Force(System.String,System.Object,System.String,System.Int32)">
            <summary>
            The force.
            </summary>
            <param name="signal">
            The signal.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Force(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The force.
            </summary>
            <param name="signals">
            The signals.
            </param>
            <param name="values">
            The values.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Read(System.String,System.String,System.Int32)">
            <summary>
            The read.
            </summary>
            <param name="signal">
            The signal.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.TryRead(System.String,System.String@,System.Int32@)">
            <summary>
            The try read.
            </summary>
            <param name="signal"></param>
            <param name="vcuType"></param>
            <param name="arrSize"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Read(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The read.
            </summary>
            <param name="signals">
            The signals.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.List`1"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Unforce(System.String,System.String,System.Int32)">
            <summary>
            The unforce.
            </summary>
            <param name="signal">
            The signal.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Unforce(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The unforce.
            </summary>
            <param name="signals">
            The signals.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.UnforceAll">
            <summary>
            The unforce all.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Write(System.String,System.Object,System.String,System.Int32)">
            <summary>
            The write.
            </summary>
            <param name="signal">
            The signal.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Write(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The write.
            </summary>
            <param name="signals">
            The signals.
            </param>
            <param name="values">
            The values.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Reset(System.String,System.String,System.Int32)">
            <summary>
            Reset signal.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.ResetAll">
            <summary>
            Reset all signals.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Check(System.String,System.String,System.Int32)">
            <summary>
            check signal
            </summary>
            <param name="signal"></param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Check(System.Collections.Generic.List{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Int32})">
            <summary>
            check signals, return missing signals
            </summary>
            <param name="signal"></param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.SetValueAtIndex(System.String,System.Object,System.Int32,System.String,System.Int32)">
            <summary>
            set value at array index
            </summary>
            <param name="signal"></param>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.GetValueAtIndex(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            get value at array index
            </summary>
            <param name="signal"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.ForceValueAtIndex(System.String,System.Object,System.Int32,System.String,System.Int32)">
            <summary>
            force value at array index
            </summary>
            <param name="signal"></param>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.UnforceValueAtIndex(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            unforce signal at index
            </summary>
            <param name="signal"></param>
            <param name="index"></param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.ClearNVRAM(System.String)">
            <summary>
            clear the NVRAM of the device "VCU1", do not restart the device after clearing
            </summary>
            <param name="device_name"></param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.ClearNVRAM(System.String,System.Boolean)">
            <summary>
            clear the NVRAM of the device "VCU1" and restart it
            </summary>
            <param name="device_name"></param>
            <param name="restart"></param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.ClearNVRAM(System.String,System.Boolean,System.UInt32)">
            <summary>
            clear the NVRAM of the device "VCU1", wait for replies for at most given seconds after reboot
            </summary>
            <param name="device_name"></param>
            <param name="restart"></param>
            <param name="reboot_timeout"></param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.NotifyPropertyChanged(System.String)">
            <summary>
            NotifyPropertyChanged
            </summary>
            <param name="info"></param>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.IsConnected">
            <summary>
            Gets a value indicating whether is connected.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Config">
            <summary>
            returns filePath to the config file
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Name">
            <summary>
            returns the name for the client
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.IP">
            <summary>
            Gets or sets the ip adress.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.SoftIP">
            <summary>
            Gets or sets the soft ip net id.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Status">
            <summary>
            returns a status which is indicates the client state.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Info">
            <summary>h
            return a status object of the client, which is bindable for the tcr.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Logger">
            <summary>
            returns or sets the logger of the c# test bench
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.ValidationMode">
            <summary>
            set the validation mode or get a status indicating the mode
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.IsValidationModeActive">
            <summary>
            get a status indicating the validation mode
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.IsDummy">
            <summary>
            get a boolean indicating if its a dummy client
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.IsEnabled">
            <summary>
            get a boolean indicating if its enabled
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Type">
            <summary>
            get a string showing the underlying client type
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.IsTraceable">
            <summary>
            get a boolean indicating if client is capable for signal tracing
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Parser">
            <summary>
            get the parser.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.Tag">
            <summary>
            get a tag object that could be anything
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.TryReadResult">
            <summary>
            The read result.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.GDCInterface">
            <summary>
            GDCInterface of rtsim client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.SignalInterface">
            <summary>
            SignalInterface  of rtsim client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.SimulationInterface">
            <summary>
            SimulationInterface of rtsim client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.StateMachines">
            <summary>
            StateMachineInterface of the rtsim client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.UserCodes">
            <summary>
            UsercodeInterface of rtsim client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.SystemInterface">
            <summary>
            SystemInterface of the rtsim client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.DeviceInterface">
            <summary>
            DeviceInterface of the rtsim client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.ForwardInterface">
            <summary>
            ForwardInterface of the rtsim client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.MCPInterface">
            <summary>
            MCPInterface of the rtsim client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.SystemUnderTestInterface">
            <summary>
            SystemUnderTestInterface of the rtsim client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.TDSInterface">
            <summary>
            TDSInterface of the rtsim client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.SimulationTracerInterface">
            <summary>
            SimulationTracerInterface of the rtsim client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.SimulationVisualizationInterface">
            <summary>
            SimulationVisualizationInterface of the rtsim client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.TestSupervisionInterface">
            <summary>
            SimulationVisualizationInterface of the rtsim client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.MobadInterface">
            <summary>
            MobadInterface of the rtsim client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.IClient.TestSupportInterface">
            <summary>
            TestSupportInterface of the rtsim client.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.SIOClientWrapper._client">
            <summary>
            The _client.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.SIOClientWrapper._ip">
            <summary>
            The _ip.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.SIOClientWrapper._config">
            <summary>
            the config file
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.SIOClientWrapper._name">
            <summary>
            a name for the client
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.SIOClientWrapper._status">
            <summary>
            The current state of the client.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.SIOClientWrapper._logger">
            <summary>
            The xml / html logger .
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.SIOClientWrapper._handles">
            <summary>
            The signal io handles
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.SIOClientWrapper._parser">
            <summary>
            The config parser.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.SIOClientWrapper.Type">
            <summary>
            get the name of the underlying type
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation">
            <summary>
            The atomic operation.
            </summary>
            <typeparam name="T">
            The type.
            </typeparam>
        </member>
        <member name="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.IAtomicOperation`1">
            <summary>
            The AtomicOperation interface.
            </summary>
            <typeparam name="T">
            The type.
            </typeparam>
        </member>
        <member name="T:BT_CSB_Tools.Utils.Misc.IHideObject">
            <summary>
            The HideObject interface.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.IHideObject.Equals(System.Object)">
            <summary>
            The equals.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.IHideObject.GetHashCode">
            <summary>
            The get hash code.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.IHideObject.GetType">
            <summary>
            The get type.
            </summary>
            <returns>
            The <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.IHideObject.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.IAtomicOperation`1.Force(`0)">
            <summary>
            The force.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.IAtomicOperation`1.Unforce">
            <summary>
            The unforce.
            </summary>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.IAtomicOperation`1.WaitForCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0)">
            <summary>
            The wait for condition.
            </summary>
            <param name="condition">
            The condition.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.IAtomicOperation`1.WaitForCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0,System.Double)">
            <summary>
            The wait for condition.
            </summary>
            <param name="condition"></param>
            <param name="value"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.IAtomicOperation`1.WaitForSignal(`0)">
            <summary>
            The wait for signal.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.IAtomicOperation`1.WaitForSignal(`0,System.Double)">
            <summary>
            The wait for signal.
            </summary>
            <param name="value"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.IAtomicOperation`1.CheckStatic(`0)">
            <summary>
            The check static.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.IAtomicOperation`1.CheckStaticCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0)">
            <summary>
            The check static condition.
            </summary>
            <param name="condition"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.IAtomicOperation`1.Write(`0)">
            <summary>
            The write.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.IAtomicOperation`1.Read">
            <summary>
            The read.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation._signalStatic">
            <summary>
            The _signal.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation.#ctor(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal)">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.AtomicOperation`1"/> class.
            </summary>
            <param name="signal">
            The signal.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation.op_Equality(BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation,System.Object)">
            <summary>
            Is.Equal to value
            </summary>
            <param name="atomicOperation"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation.op_Inequality(BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation,System.Object)">
            <summary>
            Is.Unequal to value
            </summary>
            <param name="atomicOperation"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation.op_GreaterThan(BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation,System.Object)">
            <summary>
            Is.GreaterThan to value
            </summary>
            <param name="atomicOperation"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation.op_LessThan(BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation,System.Object)">
            <summary>
            Is.LessThan to value
            </summary>
            <param name="atomicOperation"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation.op_GreaterThanOrEqual(BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation,System.Object)">
            <summary>
            Is.GreaterOrEqual to value
            </summary>
            <param name="atomicOperation"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation.op_LessThanOrEqual(BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation,System.Object)">
            <summary>
            Is.LessOrEqual to value
            </summary>
            <param name="atomicOperation"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation.Force(System.Object)">
            <summary>
            The force.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation.Unforce">
            <summary>
            The unforce.
            </summary>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation.WaitForCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,System.Object)">
            <summary>
            The wait for condition.
            </summary>
            <param name="condition">
            The condition.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation.WaitForCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,System.Object,System.Double)">
            <summary>
            The wait for condition.
            </summary>
            <param name="condition"></param>
            <param name="value"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation.WaitForSignal(System.Object)">
            <summary>
            The wait for signal.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation.WaitForSignal(System.Object,System.Double)">
            <summary>
            The wait for signal.
            </summary>
            <param name="value"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation.CheckStatic(System.Object)">
            <summary>
            The check static.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation.CheckStaticCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,System.Object)">
            <summary>
            The check static condition.
            </summary>
            <param name="condition"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation.Read">
            <summary>
            The read.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation.Write(System.Object)">
            <summary>
            The write.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.AtomicOperation.Equal(System.Object)">
            <summary>
            The equals.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="T:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalTcmsContainer">
            <summary>
            The i signal tcms container.
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalBaseContainer">
            <summary>
            The signal base container.
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.ISignalBaseContainer">
            <summary>
            The ISignalBaseContainer interface.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.ISignalBaseContainer.GetChild(System.String)">
            <summary>
            Gets the child.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.ISignalBaseContainer.Client">
            <summary>
            Gets or sets the client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.ISignalBaseContainer.Delimiter">
            <summary>
            Gets or sets the delimiter.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.ISignalBaseContainer.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.ISignalBaseContainer.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalBaseContainer._type">
            <summary>
            The type.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalBaseContainer.#ctor(BT_CSB_Tools.SignalPoolGenerator.Signals.Container.ISignalBaseContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalBaseContainer"/> class.
            </summary>
            <param name="parent">
            The parent.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalBaseContainer.#ctor(BT_CSB_Tools.CSharpTestbench)">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalBaseContainer"/> class.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalBaseContainer.Equals(System.Object)">
            <summary>
            The equals.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalBaseContainer.GetHashCode">
            <summary>
            The get hash code.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalBaseContainer.GetType">
            <summary>
            The get type.
            </summary>
            <returns>
            The <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalBaseContainer.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalBaseContainer.Keywords">
            <summary>
            The _keywords.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalTcmsContainer._testbench">
            <summary>
            The _testcase.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalTcmsContainer.#ctor(BT_CSB_Tools.CSharpTestbench)">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalTcmsContainer"/> class.
            </summary>
            <param name="testbench">
            The Testbench.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalTcmsContainer.UnforceAll">
            <summary>
            The UnforceAll.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalTcmsContainer.Testbench">
            <summary>
            Gets the Testcase.
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.IAtomicOperation`1">
            <summary>
            The AtomicOperation interface.
            </summary>
            <typeparam name="T">
            The type.
            </typeparam>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.IAtomicOperation`1.CheckStatic(`0)">
            <summary>
            The check static.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.IAtomicOperation`1.CheckStaticCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0)">
            <summary>
            The check static condition.
            </summary>
            <param name="condition"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.IAtomicOperation`1.WaitForCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0)">
            <summary>
            The wait for condition.
            </summary>
            <param name="condition">
            The condition.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.IAtomicOperation`1.WaitForCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0,System.Double)">
            <summary>
            The wait for condition
            </summary>
            <param name="condition"></param>
            <param name="value"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.IAtomicOperation`1.WaitForSignal(`0)">
            <summary>
            The wait for signal.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.IAtomicOperation`1.WaitForSignal(`0,System.Double)">
            <summary>
            The wait for signal.
            </summary>
            <param name="value"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.IAtomicOperation`1.Write(`0)">
            <summary>
            The write.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.IAtomicOperation`1.Read">
            <summary>
            The read.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.AtomicOperation`1">
            <summary>
            The atomic operation.
            </summary>
            <typeparam name="T">
            The type.
            </typeparam>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.AtomicOperation`1._signalStatic">
            <summary>
            The _signal.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.AtomicOperation`1.#ctor(BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.MwtSignal{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.AtomicOperation`1"/> class.
            </summary>
            <param name="signal">
            The signal.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.AtomicOperation`1.WaitForCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0)">
            <summary>
            The wait for condition.
            </summary>
            <param name="condition">
            The condition.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.AtomicOperation`1.WaitForCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0,System.Double)">
            <summary>
            The wait for condition.
            </summary>
            <param name="condition"></param>
            <param name="value"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.AtomicOperation`1.WaitForSignal(`0)">
            <summary>
            The wait for signal.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.AtomicOperation`1.WaitForSignal(`0,System.Double)">
            <summary>
            The wait for signal.
            </summary>
            <param name="value"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.AtomicOperation`1.CheckStatic(`0)">
            <summary>
            The check static.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.AtomicOperation`1.CheckStaticCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0)">
            <summary>
            The check static condition.
            </summary>
            <param name="condition"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.AtomicOperation`1.Read">
            <summary>
            The read.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.AtomicOperation`1.Write(`0)">
            <summary>
            The write.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.Misc.AtomicOperation`1.Equals(`0)">
            <summary>
            The equals.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic">
            <summary>
            The atomic.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic.Condition">
            <summary>
            Gets or sets the condition.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic.Signal">
            <summary>
            Gets or sets the signal.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic.Timeout">
            <summary>
            Gets or sets the timeout.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.AtomicOperation`1">
            <summary>
            The atomic operation.
            </summary>
            <typeparam name="T">
            The type.
            </typeparam>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.AtomicOperation`1._signalStatic">
            <summary>
            The _signal.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.AtomicOperation`1.#ctor(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.PdSignal{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.AtomicOperation`1"/> class.
            </summary>
            <param name="signal">
            The signal.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.AtomicOperation`1.Force(`0)">
            <summary>
            The force.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.AtomicOperation`1.Unforce">
            <summary>
            The unforce.
            </summary>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.AtomicOperation`1.WaitForCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0)">
            <summary>
            The wait for condition.
            </summary>
            <param name="condition">
            The condition.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.AtomicOperation`1.WaitForCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0,System.Double)">
            <summary>
            The wait for condition.
            </summary>
            <param name="condition"></param>
            <param name="value"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.AtomicOperation`1.WaitForSignal(`0)">
            <summary>
            The wait for signal.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.AtomicOperation`1.WaitForSignal(`0,System.Double)">
            <summary>
            The wait for signal.
            </summary>
            <param name="value"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.AtomicOperation`1.CheckStatic(`0)">
            <summary>
            The check static.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.AtomicOperation`1.CheckStaticCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0)">
            <summary>
            The check static condition.
            </summary>
            <param name="condition"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.AtomicOperation`1.Read">
            <summary>
            The read.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.AtomicOperation`1.Write(`0)">
            <summary>
            The write.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.AtomicOperation`1.Equals(`0)">
            <summary>
            The equals.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="T:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal">
            <summary>
            The base signal.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal._testbench">
            <summary>
            The _testbench.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal._isforced">
            <summary>
            The _isforced.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal._forcedIndices">
            <summary>
            A list of booleans indicating forced indices
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal._arrSize">
            <summary>
            Array size, if signal is array
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal._logger">
            <summary>
            The _ log.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal._client">
            <summary>
            The _client.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal._parent">
            <summary>
            The _parent.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal._name">
            <summary>
            The _name.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal._tcmsName">
            <summary>
            The name of the TCMS the signal belongs to.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal._type">
            <summary>
            The _type.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal._vcuType">
            <summary>
            The vcu type
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal._value">
            <summary>
            The _value.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal._atomic">
            <summary>
            The atomic.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal._suspendNotifications">
            <summary>
            The suspend notifies.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.#ctor(BT_CSB_Tools.SignalPoolGenerator.Signals.Container.ISignalBaseContainer,System.String,System.Type,System.String,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal"/> class.
            </summary>
            <param name="parent">
            The parent.
            </param>
            <param name="signal">
            The signal.
            </param>
            <param name="value">
            The value.
            </param>
            <param name="arrSize">
            The arrsize.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.AtomicOp(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,System.Object,System.Double)">
            <summary>
            Returns a atomic object which is required for methods like WaitForSignal, waitforcondition and so on.
            </summary>
            <param name="condition"></param>
            <param name="value"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.AtomicOp(System.Object,System.Double)">
            <summary>
            Returns a atomic object with a Is.Equal which is required for methods like WaitForSignal, WriteAtomic and so on.
            </summary>
            <param name="value"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.op_Equality(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal,System.Object)">
            <summary>
            The ==.
            </summary>
            <param name="signalA">
            The signal a.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            True if both values are equal, otherwise false.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.op_Equality(System.Object,BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal)">
            <summary>
            The ==.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="signalA">
            The signal a.
            </param>
            <returns>
            True if both values are equal, otherwise false.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.op_Equality(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal,BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal)">
            <summary>
            The ==.
            </summary>
            <param name="signalA">
            The signal a.
            </param>
            <param name="signalB">
            The signal b.
            </param>
            <returns>
            True if both values are equal, otherwise false.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.op_GreaterThan(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal,System.Object)">
            <summary>
            The &gt;.
            </summary>
            <param name="signalA">
            The signal a.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            True if the value of signalA is greater than the value of signalB, otherwise false.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.op_GreaterThan(System.Object,BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal)">
            <summary>
            The &gt;.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="signalA">
            The signal a.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.op_GreaterThan(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal,BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal)">
            <summary>
            The &gt;.
            </summary>
            <param name="signalA">
            The signal a.
            </param>
            <param name="signalB">
            The signal b.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.op_GreaterThanOrEqual(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal,System.Object)">
            <summary>
            The &gt;=.
            </summary>
            <param name="signalA">
            The signal a.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.op_GreaterThanOrEqual(System.Object,BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal)">
            <summary>
            The &gt;=.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="signalA">
            The signal a.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.op_GreaterThanOrEqual(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal,BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal)">
            <summary>
            The &gt;=.
            </summary>
            <param name="signalA">
            The signal a.
            </param>
            <param name="signalB">
            The signal b.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.op_Inequality(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal,System.Object)">
            <summary>
            The !=.
            </summary>
            <param name="signalA">
            The signal a.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.op_Inequality(System.Object,BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal)">
            <summary>
            The !=.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="signalA">
            The signal a.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.op_Inequality(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal,BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal)">
            <summary>
            The !=.
            </summary>
            <param name="signalA">
            The signal a.
            </param>
            <param name="signalB">
            The signal b.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.op_LessThan(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal,System.Object)">
            <summary>
            The &lt;.
            </summary>
            <param name="signalA">
            The signal a.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.op_LessThan(System.Object,BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal)">
            <summary>
            The &lt;.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="signalA">
            The signal a.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.op_LessThan(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal,BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal)">
            <summary>
            The &lt;.
            </summary>
            <param name="signalA">
            The signal a.
            </param>
            <param name="signalB">
            The signal b.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.op_LessThanOrEqual(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal,System.Object)">
            <summary>
            The &lt;=.
            </summary>
            <param name="signalA">
            The signal a.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.op_LessThanOrEqual(System.Object,BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal)">
            <summary>
            The &lt;=.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="signalA">
            The signal a.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.op_LessThanOrEqual(BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal,BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal)">
            <summary>
            The &lt;=.
            </summary>
            <param name="signalA">
            The signal a.
            </param>
            <param name="signalB">
            The signal b.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.Equals(System.Object)">
            <summary>
            The equals method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.Force(System.Object)">
            <summary>
            The force.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal._preForceValue">
            <summary>
            Save the value the signal had before ever forcing it (to a string).
            It is only set the first time the value is forced, not on any subsequent forces.
            It is also only used for outputting the value, not for any calculations, etc.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal._postForceValue">
            <summary>
            Save the value the signal got after forcing the value.
            It is set EVERY TIME the signal is forced, even on subsequent forces.
            It is also only used for outputting the value, not for any calculations, etc.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.Unforce">
            <summary>
            The unforce.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.WaitForCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,System.Object,System.Double,System.Int32)">
            <summary>
            The wait for condition.
            </summary>
            <param name="condition">
            The condition.
            </param>
            <param name="value">
            The value.
            </param>
            <param name="timeout">
            The timeout.
            </param>
            <param name="interval">
            The interval.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.WaitForSignal(System.Object,System.Double,System.Int32)">
            <summary>
            The wait for signal.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="timeout">
            The timeout.
            </param>
            <param name="interval">
            The interval.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.CheckSignalInRange(System.Object,System.Object,System.Double,System.Double,System.Int32)">
            <summary>
            Checks whether the specified signal is and stays in the given range
            for the specified amount of time in the staticTimeout and at every
            tick of the passed interval.
            </summary>
            <param name="min">The minimum value for the range that is to be checked.</param>
            <param name="max">The maximum value for the range that is to be checked.</param>
            <param name="timeout">The timeout. When do you want to stop verifying?</param>
            <param name="staticTimeout">The timeout of the static edition check.</param>
            <param name="interval">The interval: how often do you want to check per minute?</param>
            <typeparam name="T"></typeparam>
            <returns>TRUE if the signal is in range and did not change, otherwise false.</returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.CheckStatic(System.Object,System.Double,System.Int32)">
            <summary>
            The check static.
            </summary>
            <param name="value"></param>
            <param name="timeout"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.CheckStaticCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,System.Object,System.Double,System.Int32)">
            <summary>
            The check static condition.
            </summary>
            <param name="condition"></param>
            <param name="value"></param>
            <param name="timeout"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.SetValueAtIndex(System.Object,System.Int32)">
            <summary>
            Set value at specified array index
            </summary>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.GetValueAtIndex(System.Int32)">
            <summary>
            Get the value from a specified array index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.ForceValueAtIndex(System.Object,System.Int32)">
            <summary>
            Set value at specified array index
            </summary>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.UnforceValueAtIndex(System.Int32)">
            <summary>
            Unforce value at specified array index
            </summary>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.Reset">
            <summary>
            Resets the signal
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.Reset(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Resets the signal
            </summary>
            <param name="internalOnly"></param>
            <param name="removeSignal"></param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.GetTestbench(BT_CSB_Tools.SignalPoolGenerator.Signals.Container.ISignalBaseContainer)">
            <summary>
            The get Testbench.
            </summary>
            <param name="parent">
            The parent.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.CSharpTestbench"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.Subscribe(System.Int32)">
            <summary>
            Subscribe the signal to the reading thread of the c# testbench
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.Unsubscribe(System.Int32)">
            <summary>
            Unsubscribe the signal from the reading thread of the c# testbench
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.Refresh">
            <summary>
            Refresh LastValue by reading from client
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.Client">
            <summary>
            Gets the client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.TcmsName">
            <summary>
            Gets the name of the TCMS the signal belongs to.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.FullName">
            <summary>
            Gets the full name (client+signal)
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.VCUType">
            <summary>
            Gets the type on a vcu
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.LastValue">
            <summary>
            Gets the last value.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.LastTime">
            <summary>
            Gets the time where the last value has changed
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.ArraySize">
            <summary>
            Gets the array size.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.IsArray">
            <summary>
            Gets a value indicating whether is array.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.IsForced">
            <summary>
            Gets or sets a value indicating whether is forced.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.IsInvalid">
            <summary>
            Gets a value indicating whether the signal is invalid or not.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.Atomic">
            <summary>
            Gets the atomic.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.BaseSignal.ForcedIndices">
            <summary>
            Get a list of bools indicating forced indices
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is">
            <summary>
            The is.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is.LessThan">
            <summary>
            The less than.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is.GreaterThan">
            <summary>
            The greater than.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is.LessOrEqual">
            <summary>
            The less or equal.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is.GreaterOrEqual">
            <summary>
            The greater or equal.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is.Equal">
            <summary>
            The equal.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is.Unequal">
            <summary>
            The unequal.
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.AtomicOperation`1">
            <summary>
            The atomic operation.
            </summary>
            <typeparam name="T">
            The type.
            </typeparam>
        </member>
        <member name="T:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.IAtomicOperation`1">
            <summary>
            The AtomicOperation interface.
            </summary>
            <typeparam name="T">
            The type.
            </typeparam>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.IAtomicOperation`1.Force(`0)">
            <summary>
            The force.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.IAtomicOperation`1.Unforce">
            <summary>
            The unforce.
            </summary>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.IAtomicOperation`1.WaitForCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0)">
            <summary>
            The wait for condition.
            </summary>
            <param name="condition">
            The condition.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.IAtomicOperation`1.WaitForCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0,System.Double)">
            <summary>
            The wait for condition.
            </summary>
            <param name="condition"></param>
            <param name="value"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.IAtomicOperation`1.WaitForSignal(`0)">
            <summary>
            The wait for signal.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.IAtomicOperation`1.WaitForSignal(`0,System.Double)">
            <summary>
            The wait for signal.
            </summary>
            <param name="value"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.IAtomicOperation`1.CheckStatic(`0)">
            <summary>
            The check static.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.IAtomicOperation`1.CheckStaticCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0)">
            <summary>
            The check static condition.
            </summary>
            <param name="condition"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.IAtomicOperation`1.Write(`0)">
            <summary>
            The write.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.IAtomicOperation`1.Read">
            <summary>
            The read.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.AtomicOperation`1._signalStatic">
            <summary>
            The _signal.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.AtomicOperation`1.#ctor(BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.SioSignal{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.AtomicOperation`1"/> class.
            </summary>
            <param name="signal">
            The signal.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.AtomicOperation`1.Force(`0)">
            <summary>
            The force.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.AtomicOperation`1.Unforce">
            <summary>
            The unforce.
            </summary>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.AtomicOperation`1.WaitForCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0)">
            <summary>
            The wait for condition.
            </summary>
            <param name="condition">
            The condition.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.AtomicOperation`1.WaitForCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0,System.Double)">
            <summary>
            The wait for condition.
            </summary>
            <param name="condition"></param>
            <param name="value"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.AtomicOperation`1.WaitForSignal(`0)">
            <summary>
            The wait for signal.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.AtomicOperation`1.WaitForSignal(`0,System.Double)">
            <summary>
            The wait for signal.
            </summary>
            <param name="value"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.AtomicOperation`1.CheckStatic(`0)">
            <summary>
            The check static.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.AtomicOperation`1.CheckStaticCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0)">
            <summary>
            The check static condition.
            </summary>
            <param name="condition"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.AtomicOperation`1.Read">
            <summary>
            The read.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.AtomicOperation`1.Write(`0)">
            <summary>
            The write.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.Misc.AtomicOperation`1.Equals(`0)">
            <summary>
            The equals.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Atomic"/>.
            </returns>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.SioSignal`1._testbench">
            <summary>
            The _testbench.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.SioSignal`1._value">
            <summary>
            The _value.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.SioSignal`1._atomic">
            <summary>
            The atomic.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.SioSignal`1.Force(`0)">
            <summary>
            The force.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.SioSignal`1.GetHashCode">
            <summary>
            The get hash code.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.SioSignal`1.GetType">
            <summary>
            The get type.
            </summary>
            <returns>
            The <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.SioSignal`1.Unforce">
            <summary>
            The unforce.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.SioSignal`1.WaitForCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0,System.Double,System.Int32)">
            <summary>
            The wait for condition.
            </summary>
            <param name="condition">
            The condition.
            </param>
            <param name="value">
            The value.
            </param>
            <param name="timeout">
            The timeout.
            </param>
            <param name="interval">
            The interval.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.SioSignal`1.WaitForSignal(`0,System.Double,System.Int32)">
            <summary>
            The wait for signal.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="timeout">
            The timeout.
            </param>
            <param name="interval">
            The interval.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.SioSignal`1.CheckStatic(`0,System.Double,System.Int32)">
            <summary>
            The check static.
            </summary>
            <param name="value"></param>
            <param name="timeout"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.SioSignal`1.CheckStaticCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0,System.Double,System.Int32)">
            <summary>
            The check static condition.
            </summary>
            <param name="condition"></param>
            <param name="value"></param>
            <param name="timeout"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.SioSignal`1.GetTestbench(BT_CSB_Tools.SignalPoolGenerator.Signals.Container.ISignalBaseContainer)">
            <summary>
            The get Testbench.
            </summary>
            <param name="parent">
            The parent.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.CSharpTestbench"/>.
            </returns>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.SioSignal`1.Atomic">
            <summary>
            Gets or sets the atomic.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.SioSignal.SioSignal`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The IdexOutOfRangeException.
            </exception>
        </member>
        <member name="M:BT_CSB_Tools.TestcaseRunner.AddTestcase(System.Type)">
            <summary>
            Adds a testcase to the list of testcases which ought to be executed via RunTestcases().
            </summary>
            <param name="testcase"></param>
        </member>
        <member name="M:BT_CSB_Tools.TestcaseRunner.Clear">
            <summary>
            Clears the list of testcases the RunTestcases() class will be executing.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.TestcaseRunner.RunTestcases(System.String[])">
            <summary>
            Runs all testcases added to the list of testcases to be run.
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Utils.Collections.SmartObservableCollection`1">
            <summary>
            This class extends ObervableCollection and adds AddRange() support, as well with dispatcher thread invoking for multithreading.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BT_CSB_Tools.Utils.Dialogs.FolderBrowserDialogEx.Description">
            <summary>
            This description appears near the top of the dialog box, providing direction to the user.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Utils.Dialogs.FolderBrowserDialogEx.SelectedPath">
            <summary>
            Set or get the selected filePath.  
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Utils.Dialogs.FolderBrowserDialogEx.ShowNewFolderButton">
            <summary>
            Enable or disable the "New Folder" button in the browser dialog.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Utils.Dialogs.FolderBrowserDialogEx.ShowEditBox">
            <summary>
            Show an "edit box" in the folder browser.
            </summary>
            <remarks>
            The "edit box" normally shows the name of the selected folder.  
            The user may also type a pathname directly into the edit box.  
            </remarks>
            <seealso cref="P:BT_CSB_Tools.Utils.Dialogs.FolderBrowserDialogEx.ShowFullPathInEditBox"/>
        </member>
        <member name="P:BT_CSB_Tools.Utils.Dialogs.FolderBrowserDialogEx.NewStyle">
            <summary>
            Set whether to use the New Folder Browser dialog style.
            </summary>
            <remarks>
            The new style is resizable and includes a "New Folder" button.
            </remarks>
        </member>
        <member name="P:BT_CSB_Tools.Utils.Dialogs.FolderBrowserDialogEx.ShowFullPathInEditBox">
            <summary>
            Show the full filePath in the edit box as the user selects it. 
            </summary>
            <remarks>
            This works only if ShowEditBox is also set to true. 
            </remarks>
        </member>
        <member name="T:LibFTPServ.FTP.FTPLogEventType">
            <summary>
            Event Type Enumeration
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.UserConnect">
            <summary>
            Occures when a user trys to connect to the server
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.UserDisconnect">
            <summary>
            Occures when a user disconects from the server
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.ChangeWorkDir">
            <summary>
            Occures when a cwd command recived
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.DeleteFile">
            <summary>
            Occures when a dele command recived
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.ListDirectory">
            <summary>
            Occures when a list command is recived
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.MakeDirectory">
            <summary>
            Occures when a mkd command is recived
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.ListFileNames">
            <summary>
            Occures when a nlst command is recived
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.PassiveMode">
            <summary>
            Occures when a pasv command is recived
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.PortCommand">
            <summary>
            Occures when a port command is recived
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.DownloadFile">
            <summary>
            Occures when a retr command is recived
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.DeleteDirectory">
            <summary>
            Occures when a rmd command is recived
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.Rename">
            <summary>
            Occures when a rnfr and rnto command pair is recived
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.UploadFile">
            <summary>
            Occures wehen a stor coomand is recived
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.ChangeType">
            <summary>
            Occures when a type command is recived
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.AppendFile">
            <summary>
            Occures when an appe command is recived
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.FileSize">
            <summary>
            Occures when a size command is recived
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.FileModificationDate">
            <summary>
            Occures when a mtdm command is recived
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.OptionReceived">
            <summary>
            Occures when an opts command is recived
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.ConnectionReinitialize">
            <summary>
            Occures when a rein command is recived
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.Abort">
            <summary>
            Occures when an abor commnad is recived
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.FeatureList">
            <summary>
            Occures when a feat command is recived
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPLogEventType.UnknownCommand">
            <summary>
            Occures when an unknown command is recived
            </summary>
        </member>
        <member name="T:LibFTPServ.FTP.FTPLogEventArgs">
            <summary>
            Log Event args
            </summary>
        </member>
        <member name="M:LibFTPServ.FTP.FTPLogEventArgs.#ctor(LibFTPServ.FTP.FTPLogEventType,System.String,System.Boolean,System.Int32,System.String[])">
            <summary>
            Creates a new instance of LogEventArgs
            </summary>
            <param name="EventType">The Type of the event</param>
            <param name="User">Current FTP User</param>
            <param name="Succes">Completed succesfully or not</param>
            <param name="Response">Server Response code</param>
            <param name="arguments">Event specific arguments</param>
        </member>
        <member name="P:LibFTPServ.FTP.FTPLogEventArgs.EventDate">
            <summary>
            The Date and Time of the event
            </summary>
        </member>
        <member name="P:LibFTPServ.FTP.FTPLogEventArgs.Succes">
            <summary>
            Gets if the Event raising command completed succesfully or not
            </summary>
        </member>
        <member name="P:LibFTPServ.FTP.FTPLogEventArgs.User">
            <summary>
            Gets the user associated to the event
            </summary>
        </member>
        <member name="P:LibFTPServ.FTP.FTPLogEventArgs.EventType">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:LibFTPServ.FTP.FTPLogEventArgs.arguments">
            <summary>
            Event Arguments related to the event type
            </summary>
        </member>
        <member name="P:LibFTPServ.FTP.FTPLogEventArgs.Response">
            <summary>
            Gets the server Response code for the event
            </summary>
        </member>
        <member name="P:LibFTPServ.FTP.FTPLogEventArgs.Item(System.Int32)">
            <summary>
            Gets a specific event argument
            </summary>
            <param name="index">the index of the event argument to get</param>
            <returns>The the specific event argument</returns>
        </member>
        <member name="P:LibFTPServ.FTP.FTPLogEventArgs.Length">
            <summary>
            Gets the count of the event arguments
            </summary>
        </member>
        <member name="T:LibFTPServ.FTP.FTPServer">
            <summary>
            FTP server class
            </summary>
        </member>
        <member name="M:LibFTPServ.FTP.FTPServer.#ctor">
            <summary>
            Creates a new Instance of FTPServer
            </summary>
        </member>
        <member name="M:LibFTPServ.FTP.FTPServer.#ctor(BT_CSB_Tools.Logging.Log)">
            <summary>
            Creates a new Instance of FTPServer
            </summary>
        </member>
        <member name="M:LibFTPServ.FTP.FTPServer.Start">
            <summary>
            Starts the server
            </summary>
        </member>
        <member name="M:LibFTPServ.FTP.FTPServer.Stop">
            <summary>
            Stops the server
            </summary>
        </member>
        <member name="P:LibFTPServ.FTP.FTPServer.Port">
            <summary>
            Gets or sets the ftp default port
            </summary>
        </member>
        <member name="P:LibFTPServ.FTP.FTPServer.PassivePortMinimum">
            <summary>
            Gets or sets the minumum passive port number
            </summary>
        </member>
        <member name="P:LibFTPServ.FTP.FTPServer.PassivePortMaximum">
            <summary>
            Gets or sets the maximum passive port number
            </summary>
        </member>
        <member name="P:LibFTPServ.FTP.FTPServer.StartupDir">
            <summary>
            Gets or sets the global startup directory
            </summary>
        </member>
        <member name="P:LibFTPServ.FTP.FTPServer.BannedAdresses">
            <summary>
            Gets the List of Banned Adresses on the server
            </summary>
        </member>
        <member name="P:LibFTPServ.FTP.FTPServer.AcceptedAdresses">
            <summary>
            Gets the always accepted list of Adresses on the server
            </summary>
        </member>
        <member name="P:LibFTPServ.FTP.FTPServer.Users">
            <summary>
            Gets the user manager associated to this server
            </summary>
        </member>
        <member name="P:LibFTPServ.FTP.FTPServer.DownloadSpeedLimit">
            <summary>
            Gets or sets the Server downlaod speed limit in Bytes/second. -1 is disabled
            </summary>
        </member>
        <member name="P:LibFTPServ.FTP.FTPServer.UploadSpeedLimit">
            <summary>
            Gets or sets the Server upload speed limit in Bytes/second. -1 disabled
            </summary>
        </member>
        <member name="E:LibFTPServ.FTP.FTPServer.OnLogEvent">
            <summary>
            Event occures when a Logable event occures.
            </summary>
        </member>
        <member name="T:LibFTPServ.FTP.FTPUser">
            <summary>
            An FTP User management class
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPUser.Name">
            <summary>
            The Name of the user
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPUser.SHA1Password">
            <summary>
            The SHA1 hash of the user's password
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPUser.Startupdir">
            <summary>
            The home directory of the userr
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPUser.Permissions">
            <summary>
            The Permissions associated to the user
            </summary>
        </member>
        <member name="M:LibFTPServ.FTP.FTPUser.#ctor">
            <summary>
            Creates a new instance of FTPUser
            </summary>
        </member>
        <member name="M:LibFTPServ.FTP.FTPUser.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of FTPUser
            </summary>
            <param name="name">The name of the user</param>
            <param name="pass">The desired password for the user</param>
        </member>
        <member name="M:LibFTPServ.FTP.FTPUser.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of FTPUser
            </summary>
            <param name="name">The name of the user</param>
            <param name="pass">The desired password for the user</param>
            <param name="dir">The startup directory of the user</param>
        </member>
        <member name="P:LibFTPServ.FTP.FTPUser.Anonymus">
            <summary>
            Returns a new Anonymus user
            </summary>
        </member>
        <member name="T:LibFTPServ.FTP.FTPUserPermission">
            <summary>
            FTP User Permission management class
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPUserPermission.Upload">
            <summary>
            The User can upload
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPUserPermission.Delete">
            <summary>
            The user can delete files
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPUserPermission.Rename">
            <summary>
            The user can rename files
            </summary>
        </member>
        <member name="F:LibFTPServ.FTP.FTPUserPermission.ListHidden">
            <summary>
            The user can see hidden files on directory and name list
            </summary>
        </member>
        <member name="M:LibFTPServ.FTP.FTPUserPermission.Reset">
            <summary>
            Resets the current users permissions to default
            </summary>
        </member>
        <member name="T:LibFTPServ.FTP.UserManager">
            <summary>
            A User management class
            </summary>
        </member>
        <member name="M:LibFTPServ.FTP.UserManager.#ctor">
            <summary>
            Creates a new instance of UserManager
            </summary>
        </member>
        <member name="M:LibFTPServ.FTP.UserManager.AddUser(LibFTPServ.FTP.FTPUser)">
            <summary>
            Adds a user to the management system
            </summary>
            <param name="user">The user to be added</param>
        </member>
        <member name="M:LibFTPServ.FTP.UserManager.RemoveUser(LibFTPServ.FTP.FTPUser)">
            <summary>
            Removes a user from the management system
            </summary>
            <param name="user">The user to be removed</param>
        </member>
        <member name="M:LibFTPServ.FTP.UserManager.RemoveUserbyName(System.String)">
            <summary>
            Removes a user from the management system by the user's name
            </summary>
            <param name="name">The name of the user to be removed</param>
        </member>
        <member name="M:LibFTPServ.FTP.UserManager.GetPermissions(System.String)">
            <summary>
            Gets the permissions associated to the user by the user's name
            </summary>
            <param name="name">the name of the user</param>
            <returns></returns>
        </member>
        <member name="M:LibFTPServ.FTP.UserManager.Serialize(System.IO.Stream)">
            <summary>
            serializes users to stream
            </summary>
            <param name="Target"></param>
        </member>
        <member name="M:LibFTPServ.FTP.UserManager.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes users from stream
            </summary>
            <param name="Source"></param>
        </member>
        <member name="P:LibFTPServ.FTP.UserManager.Item(System.String)">
            <summary>
            Returns a user based on it's name
            </summary>
            <param name="name">The name of the user to get</param>
            <returns></returns>
        </member>
        <member name="P:LibFTPServ.FTP.UserManager.Count">
            <summary>
            Gets the number of users in the management system
            </summary>
        </member>
        <member name="P:LibFTPServ.FTP.UserManager.UserNames">
            <summary>
            gets the user names
            </summary>
        </member>
        <member name="T:LibFTPServ.VFS.VFSDynamicScriptFile">
            <summary>
            Creates a file which is generated by a dynamic script.
            </summary>
        </member>
        <member name="T:LibFTPServ.VFS.VFSVirtualFile">
            <summary>
            A VFS Virtual File structure
            </summary>
        </member>
        <member name="T:LibFTPServ.VFS.VFSVirtualItem">
            <summary>
            Base class of VFS virtual items
            </summary>
        </member>
        <member name="M:LibFTPServ.VFS.VFSVirtualItem.#ctor(System.String)">
            <summary>
            Creates a new instance of VFSVirtualItem
            </summary>
            <param name="name">The full filePath of the item in the VFS. </param>
        </member>
        <member name="M:LibFTPServ.VFS.VFSVirtualItem.#ctor(System.String,System.DateTime,System.Int64)">
            <summary>
            Creates a new instance of VFSVirtualItem
            </summary>
            <param name="name">The full filePath of the item in the VFS. </param>
            <param name="date">Item date in the VFS</param>
            <param name="size">The size of the item in the VFS</param>
        </member>
        <member name="P:LibFTPServ.VFS.VFSVirtualItem.Name">
            <summary>
            The full filePath of the item in the VFS. 
            </summary>
        </member>
        <member name="P:LibFTPServ.VFS.VFSVirtualItem.Size">
            <summary>
            The size of the item in the VFS
            </summary>
        </member>
        <member name="P:LibFTPServ.VFS.VFSVirtualItem.Date">
            <summary>
            Item date in the VFS
            </summary>
        </member>
        <member name="M:LibFTPServ.VFS.VFSVirtualFile.#ctor(System.String)">
            <summary>
            Creates a new instance of VFSVirtualFile
            </summary>
            <param name="name">The full filePath of the file in the VFS</param>
        </member>
        <member name="M:LibFTPServ.VFS.VFSVirtualFile.#ctor(System.String,System.DateTime,System.Int64)">
            <summary>
            Creates a new instance of VFSVirtualFile
            </summary>
            <param name="name">The full filePath of the file in the VFS</param>
            <param name="time">File last modification date</param>
            <param name="size">File size</param>
        </member>
        <member name="M:LibFTPServ.VFS.VFSVirtualFile.RenderContents">
            <summary>
            Renders the contents of the file
            </summary>
            <returns>The rendered content as a stream</returns>
        </member>
        <member name="M:LibFTPServ.VFS.VFSDynamicScriptFile.#ctor(System.String,System.String,LibFTPServ.VFS.ScriptType)">
            <summary>
            Creates a new instance of VFSDynamicScriptFile
            </summary>
            <param name="TargetName">The full filePath that will be visible in the VFS system</param>
            <param name="ScriptSource">The full filePath of the script source</param>
            <param name="t">Scrtipt type</param>
        </member>
        <member name="M:LibFTPServ.VFS.VFSDynamicScriptFile.#ctor(System.String,System.String,LibFTPServ.VFS.ScriptType,System.DateTime,System.Int64)">
            <summary>
            Creates a new instance of VFSDynamicScriptFile
            </summary>
            <param name="TargetName">The full filePath that will be visible in the VFS system</param>
            <param name="ScriptSource">The full filePath of the script source on Local filesystem</param>
            <param name="t">Script type</param>
            <param name="time">File Last modification date</param>
            <param name="size">File size</param>
        </member>
        <member name="M:LibFTPServ.VFS.VFSDynamicScriptFile.RenderContents">
            <summary>
            Renders the file
            </summary>
            <returns>The file as a stream</returns>
        </member>
        <member name="T:LibFTPServ.VFS.ParserPaths">
            <summary>
            stores the dynamic script parser paths
            </summary>
        </member>
        <member name="F:LibFTPServ.VFS.ParserPaths.PhpPath">
            <summary>
            The full Path to php.exe 
            </summary>
        </member>
        <member name="F:LibFTPServ.VFS.ParserPaths.PythonPath">
            <summary>
            The full filePath to python.exe
            </summary>
        </member>
        <member name="F:LibFTPServ.VFS.ParserPaths.RubyPath">
            <summary>
            the full filePath to ruby.exe
            </summary>
        </member>
        <member name="T:LibFTPServ.VFS.ScriptType">
            <summary>
            Script type enumeration
            </summary>
        </member>
        <member name="F:LibFTPServ.VFS.ScriptType.Php">
            <summary>
            PHP Script
            </summary>
        </member>
        <member name="F:LibFTPServ.VFS.ScriptType.Python">
            <summary>
            Python script
            </summary>
        </member>
        <member name="F:LibFTPServ.VFS.ScriptType.Ruby">
            <summary>
            Ruby script
            </summary>
        </member>
        <member name="F:LibFTPServ.VFS.ScriptType.Standalone">
            <summary>
            Standalone program which doesn't need an interpreter
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Utils.MessageBox.MessageBoxWindow">
            <summary>
            Interaktionslogik für MessageBoxWindow.xaml
            </summary>
            <summary>
            MessageBoxWindow
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Utils.MessageBox.MessageBoxWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Utils.MessageBox.MessageBoxWindow.WindowShowStyle">
            <summary>Enumeration of the different ways of showing a window using
            ShowWindow</summary>
        </member>
        <member name="F:BT_CSB_Tools.Utils.MessageBox.MessageBoxWindow.WindowShowStyle.Hide">
            <summary>Hides the window and activates another window.</summary>
            <remarks>See SW_HIDE</remarks>
        </member>
        <member name="F:BT_CSB_Tools.Utils.MessageBox.MessageBoxWindow.WindowShowStyle.ShowNormal">
            <summary>Activates and displays a window. If the window is minimized
            or maximized, the system restores it to its original size and
            position. An application should specify this flag when displaying
            the window for the first time.</summary>
            <remarks>See SW_SHOWNORMAL</remarks>
        </member>
        <member name="F:BT_CSB_Tools.Utils.MessageBox.MessageBoxWindow.WindowShowStyle.ShowMinimized">
            <summary>Activates the window and displays it as a minimized window.</summary>
            <remarks>See SW_SHOWMINIMIZED</remarks>
        </member>
        <member name="F:BT_CSB_Tools.Utils.MessageBox.MessageBoxWindow.WindowShowStyle.ShowMaximized">
            <summary>Activates the window and displays it as a maximized window.</summary>
            <remarks>See SW_SHOWMAXIMIZED</remarks>
        </member>
        <member name="F:BT_CSB_Tools.Utils.MessageBox.MessageBoxWindow.WindowShowStyle.Maximize">
            <summary>Maximizes the specified window.</summary>
            <remarks>See SW_MAXIMIZE</remarks>
        </member>
        <member name="F:BT_CSB_Tools.Utils.MessageBox.MessageBoxWindow.WindowShowStyle.ShowNormalNoActivate">
            <summary>Displays a window in its most recent size and position.
            This value is similar to "ShowNormal", except the window is not
            actived.</summary>
            <remarks>See SW_SHOWNOACTIVATE</remarks>
        </member>
        <member name="F:BT_CSB_Tools.Utils.MessageBox.MessageBoxWindow.WindowShowStyle.Show">
            <summary>Activates the window and displays it in its current size
            and position.</summary>
            <remarks>See SW_SHOW</remarks>
        </member>
        <member name="F:BT_CSB_Tools.Utils.MessageBox.MessageBoxWindow.WindowShowStyle.Minimize">
            <summary>Minimizes the specified window and activates the next
            top-level window in the Z order.</summary>
            <remarks>See SW_MINIMIZE</remarks>
        </member>
        <member name="F:BT_CSB_Tools.Utils.MessageBox.MessageBoxWindow.WindowShowStyle.ShowMinNoActivate">
            <summary>Displays the window as a minimized window. This value is
            similar to "ShowMinimized", except the window is not activated.</summary>
            <remarks>See SW_SHOWMINNOACTIVE</remarks>
        </member>
        <member name="F:BT_CSB_Tools.Utils.MessageBox.MessageBoxWindow.WindowShowStyle.ShowNoActivate">
            <summary>Displays the window in its current size and position. This
            value is similar to "Show", except the window is not activated.</summary>
            <remarks>See SW_SHOWNA</remarks>
        </member>
        <member name="F:BT_CSB_Tools.Utils.MessageBox.MessageBoxWindow.WindowShowStyle.Restore">
            <summary>Activates and displays the window. If the window is
            minimized or maximized, the system restores it to its original size
            and position. An application should specify this flag when restoring
            a minimized window.</summary>
            <remarks>See SW_RESTORE</remarks>
        </member>
        <member name="F:BT_CSB_Tools.Utils.MessageBox.MessageBoxWindow.WindowShowStyle.ShowDefault">
            <summary>Sets the show state based on the SW_ value specified in the
            STARTUPINFO structure passed to the CreateProcess function by the
            program that started the application.</summary>
            <remarks>See SW_SHOWDEFAULT</remarks>
        </member>
        <member name="F:BT_CSB_Tools.Utils.MessageBox.MessageBoxWindow.WindowShowStyle.ForceMinimized">
            <summary>Windows 2000/XP: Minimizes a window, even if the thread
            that owns the window is hung. This flag should only be used when
            minimizing windows from a different thread.</summary>
            <remarks>See SW_FORCEMINIMIZE</remarks>
        </member>
        <member name="T:BT_CSB_Tools.Utils.Misc.BCrypt">
            <summary>BCrypt implements OpenBSD-style Blowfish password hashing
            using the scheme described in "A Future-Adaptable Password Scheme"
            by Niels Provos and David Mazieres.</summary>
            <remarks>
            <para>This password hashing system tries to thwart offline
            password cracking using a computationally-intensive hashing
            algorithm, based on Bruce Schneier's Blowfish cipher. The work
            factor of the algorithm is parametized, so it can be increased as
            computers get faster.</para>
            <para>To hash a password for the first time, call the
            <c>HashPassword</c> method with a random salt, like this:</para>
            <code>
            string hashed = BCrypt.HashPassword(plainPassword, BCrypt.GenerateSalt());
            </code>
            <para>To check whether a plaintext password matches one that has
            been hashed previously, use the <c>CheckPassword</c> method:</para>
            <code>
            if (BCrypt.CheckPassword(candidatePassword, storedHash)) {
                Console.WriteLine("It matches");
            } else {
                Console.WriteLine("It does not match");
            }
            </code>
            <para>The <c>GenerateSalt</c> method takes an optional parameter
            (logRounds) that determines the computational complexity of the
            hashing:</para>
            <code>
            string strongSalt = BCrypt.GenerateSalt(10);
            string strongerSalt = BCrypt.GenerateSalt(12);
            </code>
            <para>
            The amount of work increases exponentially (2**log_rounds), so
            each increment is twice as much work. The default log_rounds is
            10, and the valid range is 4 to 31.
            </para>
            </remarks>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.BCrypt.EncodeBase64(System.Byte[],System.Int32)">
            <summary>Encode a byte array using bcrypt's slightly-modified
            Base64 encoding scheme. Note that this is _not_ compatible
            with the standard MIME-Base64 encoding.</summary>
            <param name="d">The byte array to encode</param>
            <param name="length">The number of bytes to encode</param>
            <returns>A Base64-encoded string</returns>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.BCrypt.Char64(System.Char)">
            <summary>Look up the 3 bits base64-encoded by the specified
            character, range-checking against the conversion
            table.</summary>
            <param name="c">The Base64-encoded value</param>
            <returns>The decoded value of <c>x</c></returns>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.BCrypt.DecodeBase64(System.String,System.Int32)">
            <summary>Decode a string encoded using BCrypt's Base64 scheme to a
            byte array. Note that this is _not_ compatible with the standard
            MIME-Base64 encoding.</summary>
            <param name="s">The string to decode</param>
            <param name="maximumLength">The maximum number of bytes to decode</param>
            <returns>An array containing the decoded bytes</returns>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.BCrypt.Encipher(System.UInt32[],System.Int32)">
            <summary>
            Blowfish encipher a single 64-bit block encoded as two 32-bit
            halves.
            </summary>
            <param name="block">An array containing the two 32-bit half
            blocks.</param>
            <param name="offset">The position in the array of the
            blocks.</param>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.BCrypt.StreamToWord(System.Byte[],System.Int32@)">
            <summary>
            Cycically extract a word of key material.
            </summary>
            <param name="data">The string to extract the data
            from.</param>
            <param name="offset">The current offset into data.</param>
            <returns>The next work of material from data.</returns>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.BCrypt.InitKey">
            <summary>
            Initialize the Blowfish key schedule.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.BCrypt.Key(System.Byte[])">
            <summary>
            Key the Blowfish cipher.
            </summary>
            <param name="key">An array containing the key.</param>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.BCrypt.EksKey(System.Byte[],System.Byte[])">
            <summary>
            Perform the "enhanced key schedule" step described by Provos
            and Mazieres in "A Future-Adaptable Password Scheme"
            (http://www.openbsd.org/papers/bcrypt-paper.ps).
            </summary>
            <param name="data">Salt information.</param>
            <param name="key">Password information.</param>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.BCrypt.CryptRaw(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Perform the central password hashing step in the bcrypt
            scheme.
            </summary>
            <param name="password">The password to hash.</param>
            <param name="salt">The binary salt to hash with the
            password.</param>
            <param name="logRounds">The binary logarithm of the number of
            rounds of hashing to apply.</param>
            <returns>An array containing the binary hashed password.</returns>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.BCrypt.HashPassword(System.String,System.String)">
            <summary>
            Hash a password using the OpenBSD bcrypt scheme.
            </summary>
            <param name="password">The password to hash.</param>
            <param name="salt">The salt to hash with (perhaps generated
            using <c>BCrypt.GenerateSalt</c>).</param>
            <returns>The hashed password.</returns>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.BCrypt.GenerateSalt(System.Int32)">
            <summary>
            Generate a salt for use with the BCrypt.HashPassword() method.
            </summary>
            <param name="logRounds">The log2 of the number of rounds of
            hashing to apply. The work factor therefore increases as (2 **
            logRounds).</param>
            <returns>An encoded salt value.</returns>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.BCrypt.GenerateSalt">
            <summary>
            Generate a salt for use with the <c>BCrypt.HashPassword()</c>
            method, selecting a reasonable default for the number of hashing
            rounds to apply.
            </summary>
            <returns>An encoded salt value.</returns>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.BCrypt.CheckPassword(System.String,System.String)">
            <summary>
            Check that a plaintext password matches a previously hashed
            one.
            </summary>
            <param name="plaintext">The plaintext password to verify.</param>
            <param name="hashed">The previously hashed password.</param>
            <returns><c>true</c> if the passwords, <c>false</c>
            otherwise.</returns>
        </member>
        <member name="T:BT_CSB_Tools.Utils.Misc.BoolParser">
            <summary>
            Parse strings into true or false bools using relaxed parsing rules
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.BoolParser.GetValue(System.String)">
            <summary>
            Get the boolean value for this string
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.BoolParser.IsFalse(System.String)">
            <summary>
            Determine whether the string is not True
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.BoolParser.IsTrue(System.String)">
            <summary>
            Determine whether the string is equal to True
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.DebugLogger.DebugLoggerHelper.Log(System.String,System.Object[])">
            <summary>
            Logs a message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.DebugLogger.DebugLoggerHelper.Log(BT_CSB_Tools.Utils.Misc.DebugLogger.LogSeverity,System.String,System.Object[])">
            <summary>
            Logs a message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.DebugLogger.DebugLoggerHelper.Log(BT_CSB_Tools.Utils.Misc.DebugLogger.LogTarget,BT_CSB_Tools.Utils.Misc.DebugLogger.LogSeverity,System.String,System.Object[])">
            <summary>
            Logs a message.
            </summary>
            <param name="target"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.DebugLogger.DebugLoggerHelper.AddLog(BT_CSB_Tools.Utils.Misc.DebugLogger.LogBase)">
            <summary>
            Adds a new logger to the logger list.
            </summary>
            <param name="logToAdd"></param>
        </member>
        <member name="P:BT_CSB_Tools.Utils.Misc.DebugLogger.DebugLoggerHelper.LoggerList">
            <summary>
            The list of loggers.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.WpfHelper.FindChild``1(System.Windows.DependencyObject,System.String)">
            <summary>
            Finds a Child of a given item in the visual tree. 
            </summary>
            <param name="parent">A direct parent of the queried item.</param>
            <typeparam name="T">The type of the queried item.</typeparam>
            <param name="childName">x:Name or Name of child. </param>
            <returns>The first parent item that matches the submitted type parameter. 
            If not matching item can be found, 
            a null parent is being returned.</returns>
        </member>
        <member name="T:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalRootContainer">
            <summary>
            The signal root container.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalRootContainer.#ctor(BT_CSB_Tools.SignalPoolGenerator.Signals.Container.ISignalBaseContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalRootContainer"/> class.
            </summary>
            <param name="parent">
            The parent.
            </param>
        </member>
        <member name="F:BT_CSB_Tools.Logging.Enums.ECommand.LessThan">
            <summary>
            The less than.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.Enums.ECommand.GreaterThan">
            <summary>
            The greater than.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.Enums.ECommand.LessOrEqual">
            <summary>
            The less or equal.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.Enums.ECommand.GreaterOrEqual">
            <summary>
            The greater or equal.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.Enums.ECommand.Equal">
            <summary>
            The equal.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.Enums.ECommand.Unequal">
            <summary>
            The unequal.
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Logging.Log">
            <summary>
            WriteError out messages using the logging provider.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.Log._counter">
            <summary>
            The counter.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Logging.Log.#ctor(BT_CSB_Tools.Logging.TestInfo@,BT_CSB_Tools.CSharpTestbench)">
            <summary>
            Initializes static members of the <see cref="T:BT_CSB_Tools.Logging.Log"/> class. 
            Static instance of the log manager.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Logging.Log._guiLogViewModel">
            <summary>
            Gets the <see cref="!:GuiLogAppender"/> log.
            </summary>
            <returns>The instance of the <see cref="!:GuiLogAppender"/> log, if configured.
            Null otherwise.</returns>
        </member>
        <member name="M:BT_CSB_Tools.Logging.Log.TraceCommand(BT_CSB_Tools.Logging.Enums.ECommand,System.DateTime,System.Object,System.Object,BT_CSB_Tools.Logging.Enums.EResult,System.String,System.Object[])">
            <summary>
            Writes the message to the text and gui log, if enabled.
            </summary>
            <param name="command">
            The command.
            </param>
            <param name="question">
            The question.
            </param>
            <param name="answer">
            The answer.
            </param>
            <param name="result">
            The result.
            </param>
            <param name="comment">
            The comment.
            </param>
            <param name="args">
            The args.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.Logging.Log.WriteError(System.String,System.Object[])">
            <summary>
            WriteError the message to the text log only, based on the relevant log level.
            </summary>
            <param name="level">
            The log level to be used.
            </param>
            <param name="message">
            The message to be written.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the message is empty.
            </exception>
        </member>
        <member name="M:BT_CSB_Tools.Logging.Log.TraceHeader(System.String,System.Object[])">
            <summary>
            Gibt eine Überschrift in Fettschrift und Kursiv aus
            </summary>
            <param name="header">Der TraceText.</param>
        </member>
        <member name="M:BT_CSB_Tools.Logging.Log.TraceText(System.String,System.Object[])">
            <summary>
            Gibt einen TraceText aus
            </summary>
            <param name="text">der TraceText</param>
        </member>
        <member name="M:BT_CSB_Tools.Logging.Log.EndLogging(System.Boolean)">
            <summary>
            beendet das Logging für einen Testfall. Löst das Schreiben des XML und HTML-File aus und setzt die Variablen auf den Initialwert zurück um ein neues Logging zu starten
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Logging.Log.writeTestcase(System.Boolean,System.Boolean)">
            <summary>
            schreibt die Testfall-XML-Datei auf die Platte und erstellt danach den HTM-REPORT
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Logging.Log.writeHTML(System.String)">
            <summary>
            Transformiert die XML-Datei mit Hilfe der XSL-Datei zu einem HTML-REPORT
            </summary>
            <param name="filePath">der Pfad zu der XML-Datei</param>
        </member>
        <member name="M:BT_CSB_Tools.Logging.Log.createLoggingFilename(System.String)">
            <summary>
            Erstellt den XML-Namen mit Datum und Zeit
            </summary>
            <param name="filename">der Filename</param>
            <returns>der Filename mit komplettem Pfad</returns>
        </member>
        <member name="T:BT_CSB_Tools.Logging.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:SignalPoolGenerator.MicroStopwatch">
            <summary>
            MicroStopwatch class
            </summary>
        </member>
        <member name="F:SignalPoolGenerator.MicroStopwatch._microSecPerTick">
            <summary>
            The _micro sec per tick.
            </summary>
        </member>
        <member name="M:SignalPoolGenerator.MicroStopwatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SignalPoolGenerator.MicroStopwatch"/> class.
            </summary>
            <exception cref="T:System.Exception">
            A non groovy exception.
            </exception>
        </member>
        <member name="P:SignalPoolGenerator.MicroStopwatch.ElapsedMicroseconds">
            <summary>
            Gets the elapsed microseconds.
            </summary>
        </member>
        <member name="T:SignalPoolGenerator.MicroTimer">
            <summary>
            MicroTimer class.
            </summary>
        </member>
        <member name="F:SignalPoolGenerator.MicroTimer._ignoreEventIfLateBy">
            <summary>
            The _ignore event if late by.
            </summary>
        </member>
        <member name="F:SignalPoolGenerator.MicroTimer._stopTimer">
            <summary>
            The _stop timer.
            </summary>
        </member>
        <member name="F:SignalPoolGenerator.MicroTimer._threadTimer">
            <summary>
            The _thread timer.
            </summary>
        </member>
        <member name="F:SignalPoolGenerator.MicroTimer._timerIntervalInMicroSec">
            <summary>
            The _timer interval in micro sec.
            </summary>
        </member>
        <member name="M:SignalPoolGenerator.MicroTimer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SignalPoolGenerator.MicroTimer"/> class.
            </summary>
        </member>
        <member name="M:SignalPoolGenerator.MicroTimer.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SignalPoolGenerator.MicroTimer"/> class.
            </summary>
            <param name="timerIntervalInMicroseconds">
            The timer interval in microseconds.
            </param>
        </member>
        <member name="M:SignalPoolGenerator.MicroTimer.Abort">
            <summary>
            The abort.
            </summary>
        </member>
        <member name="M:SignalPoolGenerator.MicroTimer.Start">
            <summary>
            The start.
            </summary>
        </member>
        <member name="M:SignalPoolGenerator.MicroTimer.Stop">
            <summary>
            The stop.
            </summary>
        </member>
        <member name="M:SignalPoolGenerator.MicroTimer.StopAndWait">
            <summary>
            The stop and wait.
            </summary>
        </member>
        <member name="M:SignalPoolGenerator.MicroTimer.StopAndWait(System.Int32)">
            <summary>
            The stop and wait.
            </summary>
            <param name="timeoutInMilliSec">
            The timeout in milliseconds.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:SignalPoolGenerator.MicroTimer.NotificationTimer(System.Int64@,System.Int64@,System.Boolean@)">
            <summary>
            The notification timer.
            </summary>
            <param name="timerIntervalInMicroSec">
            The timer interval in micro sec.
            </param>
            <param name="ignoreEventIfLateBy">
            The ignore event if late by.
            </param>
            <param name="stopTimer">
            The stop timer.
            </param>
        </member>
        <member name="E:SignalPoolGenerator.MicroTimer.MicroTimerElapsed">
            <summary>
            The micro timer elapsed.
            </summary>
        </member>
        <member name="P:SignalPoolGenerator.MicroTimer.Enabled">
            <summary>
            Gets or sets a value indicating whether enabled.
            </summary>
        </member>
        <member name="P:SignalPoolGenerator.MicroTimer.IgnoreEventIfLateBy">
            <summary>
            Gets or sets the ignore event if late by.
            </summary>
        </member>
        <member name="P:SignalPoolGenerator.MicroTimer.Interval">
            <summary>
            Gets or sets the interval.
            </summary>
        </member>
        <member name="T:SignalPoolGenerator.MicroTimer.MicroTimerElapsedEventHandler">
            <summary>
            The micro timer elapsed event handler.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="timerEventArgs">
            The timer event args.
            </param>
        </member>
        <member name="T:SignalPoolGenerator.MicroTimerEventArgs">
            <summary>
            MicroTimer Event Argument class
            </summary>
        </member>
        <member name="M:SignalPoolGenerator.MicroTimerEventArgs.#ctor(System.Int32,System.Int64,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SignalPoolGenerator.MicroTimerEventArgs"/> class.
            </summary>
            <param name="timerCount">
            The timer count.
            </param>
            <param name="elapsedMicroseconds">
            The elapsed microseconds.
            </param>
            <param name="timerLateBy">
            The timer late by.
            </param>
            <param name="callbackFunctionExecutionTime">
            The callback function execution time.
            </param>
        </member>
        <member name="P:SignalPoolGenerator.MicroTimerEventArgs.CallbackFunctionExecutionTime">
            <summary>
            Gets the time it took to execute previous call to callback function (OnTimedEvent)
            </summary>
        </member>
        <member name="P:SignalPoolGenerator.MicroTimerEventArgs.ElapsedMicroseconds">
            <summary>
            Gets the elapsed microseconds.
            </summary>
        </member>
        <member name="P:SignalPoolGenerator.MicroTimerEventArgs.TimerCount">
            <summary>
            Gets the timer count.
            </summary>
        </member>
        <member name="P:SignalPoolGenerator.MicroTimerEventArgs.TimerLateBy">
            <summary>
            Gets how late the timer was compared to when it should have been called.
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Utils.Splash.Splash">
            <summary>
            Interaktionslogik für Splash.xaml
            </summary>
            <summary>
            Splash
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Utils.Splash.Splash.SplashScreen">
            <summary>
            The splash.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Splash.Splash.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.Utils.Splash.Splash"/> class.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Splash.Splash.BeginDisplay">
            <summary>
            The begin display.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Splash.Splash.EndDisplay">
            <summary>
            The end display.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Splash.Splash.Update(System.String)">
            <summary>
            The loading.
            </summary>
            <param name="test">
            The test.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Splash.Splash.OnSourceInitialized(System.EventArgs)">
            <summary>
            The on source initialized.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Splash.Splash.Refresh(System.Windows.Threading.DispatcherObject)">
            <summary>
            The refresh.
            </summary>
            <param name="obj">
            The obj.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Splash.Splash.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Utils.Splash.Splash.RefreshDelegate">
            <summary>
            The refresh delegate.
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Utils.Splash.WindowsServices">
            <summary>
            The windows services.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Utils.Splash.WindowsServices.GWL_EXSTYLE">
            <summary>
            The gw l_ exstyle.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Utils.Splash.WindowsServices.WS_EX_TRANSPARENT">
            <summary>
            The w s_ e x_ transparent.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Splash.WindowsServices.SetWindowExTransparent(System.IntPtr)">
            <summary>
            The set window ex transparent.
            </summary>
            <param name="hwnd">
            The hwnd.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Splash.WindowsServices.GetWindowLong(System.IntPtr,System.Int32)">
            <summary>
            The get window long.
            </summary>
            <param name="hwnd">
            The hwnd.
            </param>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Splash.WindowsServices.SetWindowLong(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The set window long.
            </summary>
            <param name="hwnd">
            The hwnd.
            </param>
            <param name="index">
            The index.
            </param>
            <param name="newStyle">
            The new style.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:BT_CSB_Tools.Logging.GuiLoggerAppender.GuiLogWindow">
            <summary>
            Interaktionslogik für GuiLogWindow.xaml
            </summary>
            <summary>
            GuiLogWindow
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Logging.GuiLoggerAppender.GuiLogWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.Logging.GuiLoggerAppender.GuiLogWindow"/> class.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Logging.GuiLoggerAppender.GuiLogWindow.#ctor(BT_CSB_Tools.CSharpTestbench)">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.Logging.GuiLoggerAppender.GuiLogWindow"/> class.
            </summary>
            <param name="bench">
            The bench.
            </param>
        </member>
        <member name="F:BT_CSB_Tools.Logging.GuiLoggerAppender.GuiLogWindow._bench">
            <summary>
            The _bench field backing the Bench property.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Logging.GuiLoggerAppender.GuiLogWindow.GetScrollViewer(System.Windows.DependencyObject)">
            <summary>
            The get scroll viewer.
            </summary>
            <param name="o">
            The o.
            </param>
            <returns>
            The <see cref="T:System.Windows.DependencyObject"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.Logging.GuiLoggerAppender.GuiLogWindow.WindowLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The window_ loaded.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.Logging.GuiLoggerAppender.GuiLogWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.GuiLogWindow.Testbench">
            <summary>
            Gets or sets the Bench.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Logging.GuiLoggerAppender.GuiLogWindow.GuiLogViewModel">
            <summary>
            Gets the gui log.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Parser.FlConfig.FLConfigParser._parsed">
            <summary>
            boolean indicating if parsed or not
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.MwtSignal`1">
            <summary>
            The pd signal.
            </summary>
            <typeparam name="T">
            The type.
            </typeparam>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.MwtSignal`1._testbench">
            <summary>
            The _testcase.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.MwtSignal`1._value">
            <summary>
            The _value.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.MwtSignal`1._atomic">
            <summary>
            The atomic.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.MwtSignal`1.#ctor(BT_CSB_Tools.SignalPoolGenerator.Signals.Container.ISignalBaseContainer,System.String,System.String,System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.MwtSignal`1"/> class.
            </summary>
            <param name="parent">
            The parent container.
            </param>
            <param name="signalA">
            The signal A.
            </param>
            <param name="arrSize">
            The arr Size.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.MwtSignal`1.GetType">
            <summary>
            The get type.
            </summary>
            <returns>
            The <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.MwtSignal`1.WaitForCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0,System.Double,System.Int32)">
            <summary>
            The wait for condition.
            </summary>
            <param name="condition">
            The condition.
            </param>
            <param name="value">
            The value.
            </param>
            <param name="timeout">
            The timeout.
            </param>
            <param name="interval">
            The interval.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.MwtSignal`1.WaitForSignal(`0,System.Double,System.Int32)">
            <summary>
            The wait for signal.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="timeout">
            The timeout.
            </param>
            <param name="interval">
            The interval.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.MwtSignal`1.CheckStatic(`0,System.Double,System.Int32)">
            <summary>
            The check static.
            </summary>
            <param name="value"></param>
            <param name="timeout"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.MwtSignal`1.CheckStaticCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0,System.Double,System.Int32)">
            <summary>
            The check static condition.
            </summary>
            <param name="condition"></param>
            <param name="value"></param>
            <param name="timeout"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.MwtSignal`1.GetTestbench(BT_CSB_Tools.SignalPoolGenerator.Signals.Container.ISignalBaseContainer)">
            <summary>
            The get Testcase.
            </summary>
            <param name="parent">
            The parent.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.CSharpTestbench"/>.
            </returns>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.MwtSignal`1.Atomic">
            <summary>
            Gets or sets the atomic.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.MwtSignal.MwtSignal`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The exception.
            </exception>
        </member>
        <member name="T:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfig">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfig.consistlist">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfig.devicelist">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfig.pdsignallist">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfig.idsignallist">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfig.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfig.version">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfig.datetime">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfig.consist">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfig.crc">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfig.configversion">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfig.mutconfigcrc">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigDevice">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigDevice.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigDevice.ctrlidx">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigDevice.issim">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigDevice.mvb">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig.idx">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig.type">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig.array">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig.alias">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig.aliases">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig.Default">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig1">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig1.idx">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig1.name">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig1.type">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig1.stype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig1.sidx">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig1.pid">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig1.id">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig1.tdsptype">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig1.rawmin">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig1.rawmax">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig1.rawdefault">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig1.array">
            <remarks/>
        </member>
        <member name="P:BT_CSB_Tools.Parser.RtsimConfig.rtsimconfigSig1.alias">
            <remarks/>
        </member>
        <member name="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.PdSignal`1">
            <summary>
            The pd signal.
            </summary>
            <typeparam name="T">
            The type.
            </typeparam>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.PdSignal`1._testbench">
            <summary>
            The _testbench.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.PdSignal`1._value">
            <summary>
            The _value.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.PdSignal`1._atomic">
            <summary>
            The atomic.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.PdSignal`1.#ctor(BT_CSB_Tools.SignalPoolGenerator.Signals.Container.ISignalBaseContainer,System.String,System.String,System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.PdSignal`1"/> class.
            </summary>
            <param name="parent">
            The parent.
            </param>
            <param name="signalA">
            The name of the first signal.
            </param>
            <param name="arrSize">
            The name of the second signal.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.PdSignal`1.Force(`0)">
            <summary>
            The force.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.PdSignal`1.GetHashCode">
            <summary>
            The get hash code.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.PdSignal`1.GetType">
            <summary>
            The get type.
            </summary>
            <returns>
            The <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.PdSignal`1.Unforce">
            <summary>
            The unforce.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.PdSignal`1.WaitForCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0,System.Double,System.Int32)">
            <summary>
            The wait for condition.
            </summary>
            <param name="condition">
            The condition.
            </param>
            <param name="value">
            The value.
            </param>
            <param name="timeout">
            The timeout.
            </param>
            <param name="interval">
            The interval.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.PdSignal`1.WaitForSignal(`0,System.Double,System.Int32)">
            <summary>
            The wait for signal.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="timeout">
            The timeout.
            </param>
            <param name="interval">
            The interval.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.PdSignal`1.CheckStatic(`0,System.Double,System.Int32)">
            <summary>
            The check static.
            </summary>
            <param name="value"></param>
            <param name="timeout"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.PdSignal`1.CheckStaticCondition(BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.Misc.Is,`0,System.Double,System.Int32)">
            <summary>
            The check static condition.
            </summary>
            <param name="condition"></param>
            <param name="value"></param>
            <param name="timeout"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.PdSignal`1.GetTestbench(BT_CSB_Tools.SignalPoolGenerator.Signals.Container.ISignalBaseContainer)">
            <summary>
            The get Testbench.
            </summary>
            <param name="parent">
            The parent.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.CSharpTestbench"/>.
            </returns>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.PdSignal`1.Atomic">
            <summary>
            Gets or sets the atomic.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Signals.PdSignal.PdSignal`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            The IdexOutOfRangeException.
            </exception>
        </member>
        <member name="T:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper">
            <summary>
            The rds client wrapper.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper._client">
            <summary>
            The _client.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper._ip">
            <summary>
            The _ip.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper._lock">
            <summary>
            The thread _lock.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper._bench">
            <summary>
            The testbench
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper._config">
            <summary>
            the config file
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper._name">
            <summary>
            a name for the client
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper._status">
            <summary>
            The current state of the client.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper._parser">
            <summary>
            The config parser.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper.#ctor(BT_CSB_Tools.Parser.ISignalParser,BT_CSB_Tools.Logging.Log)">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper"/> class.
            </summary>
            <param name="parser"></param>
            <param name="logger"></param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper.#ctor(System.Net.IPAddress,System.String,System.String,BT_CSB_Tools.Logging.Log,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper"/> class.
            </summary>
            <param name="ip">
            The ip.
            </param>
            <param name="configFile">
            The config file.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper.Dispose">
            <summary>
            The dispose.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper.Read(System.String,System.String,System.Int32)">
            <summary>
            The read.
            </summary>
            <param name="signal">
            The signal.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper.Read(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The read.
            </summary>
            <param name="signals">
            The signals.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.List`1"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper.Write(System.String,System.Object,System.String,System.Int32)">
            <summary>
            The write.
            </summary>
            <param name="signal">
            The signal.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper.Write(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The write.
            </summary>
            <param name="signals">
            The signals.
            </param>
            <param name="values">
            The values.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper.SetWriteSelection(System.Collections.Generic.IList{System.String})">
            <summary>
            Select RDS signals for fast write access.
            </summary>
            <param name="fullQualifiedNames"></param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper.WriteSelected(System.Collections.Generic.IList{System.Object})">
            <summary>
            WriteError selected RDS signals.
            </summary>
            <param name="valueList"></param>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper.IP">
            <summary>
            Gets or sets the ip.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper.SoftIP">
            <summary>
            Gets or sets the soft ip net id.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper.Status">
            <summary>
            Gets the current state of the client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper.Config">
            <summary>
            Gets the config file
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper.Name">
            <summary>
            Gets the name for the client
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper.Type">
            <summary>
            get the name of the underlying type
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.RDSClientWrapper.IsConnected">
            <summary>
            Gets a value indicating whether is connected.
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper">
            <summary>
            The rt sim client wrapper.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper._client">
            <summary>
            The _client.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper._ip">
            <summary>
            The _ip.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper._config">
            <summary>
            the config file
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper._configCRC">
            <summary>
            The crc of a config file
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper._name">
            <summary>
            a name for the client
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper._status">
            <summary>
            The current state of the client.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper._flConfig">
            <summary>
            The flconfig collection;
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper._rtsimconfig">
            <summary>
            The rtsim config file.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper._logger">
            <summary>
            The xml / html logger .
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper._softIP_netID">
            <summary>
            The soft ip net id.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper._parser">
            <summary>
            The config parser.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.#ctor(System.Net.IPAddress,System.String,System.String,BT_CSB_Tools.Logging.Log,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper"/> class.
            </summary>
            <param name="ip">
            The ip.
            </param>
            <param name="configFile">
            The config name.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.Dispose">
            <summary>
            The dispose.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.Force(System.String,System.Object,System.String,System.Int32)">
            <summary>
            The force.
            </summary>
            <param name="signal">
            The signal.
            </param>
            <param name="value">
            The value.
            </param>
            <exception cref="T:BT_RTSIMClient.RTSIMClientNotConnectedException">
            </exception>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.Force(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The force.
            </summary>
            <param name="signals">
            The signals.
            </param>
            <param name="values">
            The values.
            </param>
            <exception cref="T:BT_RTSIMClient.RTSIMClientNotConnectedException">
            </exception>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.Read(System.String,System.String,System.Int32)">
            <summary>
            The read.
            </summary>
            <param name="signal">
            The signal.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
            <exception cref="T:BT_RTSIMClient.RTSIMClientNotConnectedException">
            </exception>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.Read(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The read.
            </summary>
            <param name="signals">
            The signals.
            </param>
            <returns>
            The <see cref="!:signals"/>.
            </returns>
            <exception cref="T:BT_RTSIMClient.RTSIMClientNotConnectedException">
            </exception>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.Unforce(System.String,System.String,System.Int32)">
            <summary>
            The unforce.
            </summary>
            <param name="signal">
            The signal.
            </param>
            <exception cref="T:BT_RTSIMClient.RTSIMClientNotConnectedException">
            </exception>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.Unforce(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The unforce.
            </summary>
            <param name="signals">
            The signals.
            </param>
            <exception cref="T:BT_RTSIMClient.RTSIMClientNotConnectedException">
            </exception>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.UnforceAll">
            <summary>
            The unforce all.
            </summary>
            <exception cref="T:BT_RTSIMClient.RTSIMClientNotConnectedException">
            </exception>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.Write(System.String,System.Object,System.String,System.Int32)">
            <summary>
            The write.
            </summary>
            <param name="signal">
            The signal.
            </param>
            <param name="value">
            The value.
            </param>
            <exception cref="T:BT_RTSIMClient.RTSIMClientNotConnectedException">
            </exception>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.Write(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The write.
            </summary>
            <param name="signals">
            The signals.
            </param>
            <param name="values">
            The values.
            </param>
            <exception cref="T:BT_RTSIMClient.RTSIMClientNotConnectedException">
            </exception>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.Connect">
            <summary>
            Connect the client.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.Disconnect">
            <summary>
            Disconnect the client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.RTSIMClient">
            <summary>
            Gets or sets the rtsim client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.IP">
            <summary>
            Gets or sets the ip.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.SoftIP">
            <summary>
            Gets or sets the soft ip net id.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.Config">
            <summary>
            Gets the config file
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.Name">
            <summary>
            Gets the name for the client
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.Type">
            <summary>
            get the name of the underlying type
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.Status">
            <summary>
            Gets the current state of the client.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.FLConfig">
            <summary>
            The FLConfig file.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.RTSimConfig">
            <summary>
            The rtsim file.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.SignalPoolGenerator.Clients.RTSimClientWrapper.IsConnected">
            <summary>
            Gets a value indicating whether is connected.
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalContainer">
            <summary>
            The SignalContainer interface.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalContainer.#ctor(BT_CSB_Tools.SignalPoolGenerator.Signals.Container.ISignalBaseContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.SignalPoolGenerator.Signals.Container.SignalContainer"/> class.
            </summary>
            <param name="parent">
            The parent.
            </param>
        </member>
        <member name="T:BT_CSB_Tools.Utils.Misc.WpfScreen">
            <summary>
            The WpfScreen.
            </summary>
        </member>
        <member name="F:BT_CSB_Tools.Utils.Misc.WpfScreen._screen">
            <summary>
            The _screen.
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.WpfScreen.#ctor(System.Windows.Forms.Screen)">
            <summary>
            Initializes a new instance of the <see cref="T:BT_CSB_Tools.Utils.Misc.WpfScreen"/> class.
            </summary>
            <param name="screen">
            The screen.
            </param>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.WpfScreen.AllScreens">
            <summary>
            The all screens.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.WpfScreen.GetScreenFrom(System.Windows.Window)">
            <summary>
            The get screen from.
            </summary>
            <param name="window">
            The window.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.Utils.Misc.WpfScreen"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.WpfScreen.GetScreenFrom(System.Windows.Point)">
            <summary>
            The get screen from.
            </summary>
            <param name="point">
            The point.
            </param>
            <returns>
            The <see cref="T:BT_CSB_Tools.Utils.Misc.WpfScreen"/>.
            </returns>
        </member>
        <member name="M:BT_CSB_Tools.Utils.Misc.WpfScreen.GetRect(System.Drawing.Rectangle)">
            <summary>
            Converts a System.Drawing.Rectangle into a System.Windows.Rect.
            </summary>
            <param name="value">
            A <see cref="T:System.Drawing.Rectangle"/>.
            </param>
            <returns>
            A new <see cref="T:System.Drawing.Rectangle"/>.
            </returns>
        </member>
        <member name="P:BT_CSB_Tools.Utils.Misc.WpfScreen.Primary">
            <summary>
            Gets the primary.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Utils.Misc.WpfScreen.DeviceBounds">
            <summary>
            Gets the device bounds.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Utils.Misc.WpfScreen.DeviceName">
            <summary>
            Gets the device name.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Utils.Misc.WpfScreen.IsPrimary">
            <summary>
            Gets a value indicating whether is primary.
            </summary>
        </member>
        <member name="P:BT_CSB_Tools.Utils.Misc.WpfScreen.WorkingArea">
            <summary>
            Gets the working area.
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Utils.TestInfo.TestInfoEditor">
            <summary>
            Interaktionslogik für TestInfoEditor.xaml
            </summary>
            <summary>
            TestInfoEditor
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Utils.TestInfo.TestInfoEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:BT_CSB_Tools.Utils.TestInfo.TestInfoWindow">
            <summary>
            Interaktionslogik für TestInfoWindow.xaml
            </summary>
            <summary>
            TestInfoWindow
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Utils.TestInfo.TestInfoWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:BT_CSB_Tools.Utils.XmlValidator.Validate(System.String,System.String)">
            <summary>
            Validates an XML file against an XSD.
            </summary>
            <param name="xmlFileName">The XML file.</param>
            <param name="xsdFileName">The XSD file.</param>
            <returns>"True" if validation was successful, otherwise "False".</returns>
        </member>
        <member name="M:BT_CSB_Tools.Utils.XmlValidator.GetError">
            <summary>
            If a validation error occurred, this will return the message.
            </summary>
            <returns>The error message.</returns>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
